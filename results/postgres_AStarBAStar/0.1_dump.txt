seed = 1737386697043620073
2,0.1,18,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,13,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,14,false,16:24:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,13,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,true,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,true,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,true,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,true,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:24:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,13,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,15,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,15,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,14,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,17,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,16,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,17,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,18,false,16:25:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,15,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,17,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,18,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,17,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,17,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,15,false,16:25:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,35,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,35,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,35,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,35,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,false,16:25:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,16,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,17,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,17,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,17,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,14,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,19,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,19,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,19,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,19,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,23,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,23,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,23,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,23,false,16:25:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,84,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (18)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,83,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (18)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,84,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (18)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,83,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (18)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,15,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,153,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,153,false,16:25:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,153,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,154,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,31,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,31,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,31,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,31,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,17,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,17,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,17,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,17,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,15,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,15,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,15,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,15,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,47,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,47,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,47,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,47,false,16:25:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,43,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,43,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,42,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,43,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,14,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,163,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,163,false,16:25:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,164,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,163,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,15,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,20,true,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,20,true,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,20,true,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,20,true,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,21,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,20,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,21,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,21,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,35,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,35,false,16:25:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,35,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,35,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,14,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,14,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,14,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,14,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,17,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,16,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,16,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,16,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,20,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,20,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,20,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,20,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,89,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,89,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,89,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,89,false,16:25:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,208,false,16:25:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,208,false,16:25:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,208,false,16:25:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,208,false,16:25:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,19347,false,16:25:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,19449,false,16:26:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,19452,false,16:26:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,19443,false,16:26:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2785,false,16:26:56
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2785,false,16:26:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2795,false,16:27:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2787,false,16:27:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,275,false,16:27:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,275,false,16:27:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,275,false,16:27:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,275,false,16:27:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2131,false,16:27:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2144,false,16:27:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2135,false,16:27:15
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,2137,false,16:27:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,326,false,16:27:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,327,false,16:27:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,326,false,16:27:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,326,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,20,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,20,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,20,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,20,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,16,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,16,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,16,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,16,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,38,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 11);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,38,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 11);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,38,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 11);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,37,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 11);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,47,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,47,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,47,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,47,false,16:27:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,137,false,16:27:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,138,false,16:27:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,138,false,16:27:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,137,false,16:27:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,400,false,16:27:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,399,false,16:27:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,399,false,16:27:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,399,false,16:27:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,233,false,16:27:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 27);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,237,false,16:27:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 27);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,234,false,16:27:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 27);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,238,false,16:27:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 25);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 27);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,16,true,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,16,true,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,16,true,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,16,true,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 24);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,134,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,134,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,134,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,134,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,21,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,21,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,21,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,21,false,16:27:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,39,false,16:27:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 7);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,39,false,16:27:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 7);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,39,false,16:27:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 7);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
28,0.1,39,false,16:27:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (25, 7);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,4328,false,16:27:33
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (9, 28);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (12, 28);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (26, 14);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,4340,false,16:27:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (9, 28);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (12, 28);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (26, 14);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,4333,false,16:27:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (9, 28);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (12, 28);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (26, 14);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,4340,false,16:27:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (9, 28);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (12, 28);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (22, 26);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 23);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (26, 14);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,263128,false,16:36:33
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (27, 0);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,263847,false,16:40:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (27, 0);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,263586,false,16:45:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (27, 0);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,264421,false,16:49:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO B (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (27, 0);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,297,false,16:49:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (6, 28);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO A (s, t) VALUES (26, 26);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (28, 27);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,297,false,16:49:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (6, 28);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO A (s, t) VALUES (26, 26);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (28, 27);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,296,false,16:49:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (6, 28);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO A (s, t) VALUES (26, 26);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (28, 27);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,296,false,16:49:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (6, 28);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO A (s, t) VALUES (26, 26);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (28, 27);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,147,false,16:49:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,144,false,16:49:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,143,false,16:49:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,146,false,16:49:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO A (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,5726,false,16:49:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,5709,false,16:50:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,5722,false,16:50:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
29,0.1,5708,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (12, 28);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,22,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO A (s, t) VALUES (3, 29);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,22,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO A (s, t) VALUES (3, 29);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,22,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO A (s, t) VALUES (3, 29);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,22,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO A (s, t) VALUES (3, 29);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO A (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,262,false,16:50:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 21);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,262,false,16:50:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 21);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,262,false,16:50:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 21);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,261,false,16:50:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 2);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 21);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,711,false,16:50:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (15, 29);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 11);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,723,false,16:50:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (15, 29);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 11);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,718,false,16:50:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (15, 29);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 11);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,715,false,16:50:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (15, 29);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 11);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,24,true,16:50:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 25);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,24,true,16:50:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 25);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,24,true,16:50:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 25);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,24,true,16:50:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 24);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 25);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,4335,false,16:50:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 29);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 25);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,4338,false,16:50:34
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 29);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 25);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,4330,false,16:50:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 29);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 25);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
30,0.1,4344,false,16:50:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 29);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (25, 25);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:00:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 15);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (30, 0);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 29);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (30)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:05:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 15);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (30, 0);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 29);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (30)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:10:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 15);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (30, 0);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 29);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (30)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:15:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 25);
INSERT INTO A (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 15);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (30, 0);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 29);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (30)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:25:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 28);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 21);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (25)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:30:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 28);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 21);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (25)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:35:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 28);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 21);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (25)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:40:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO A (s, t) VALUES (2, 28);
INSERT INTO B (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (3, 27);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 26);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 10);
INSERT INTO A (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 2);
INSERT INTO A (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 21);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (25)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:50:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 30);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 28);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,17:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 30);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 28);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:00:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 30);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 28);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:05:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO B (s, t) VALUES (1, 30);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO A (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 14);
INSERT INTO B (s, t) VALUES (25, 16);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (29, 7);
INSERT INTO B (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 15);
INSERT INTO A (s, t) VALUES (30, 28);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:15:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 30);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 30);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 18);
INSERT INTO B (s, t) VALUES (30, 11);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (30, 22);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO StartLabel VALUES (29)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:20:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 30);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 30);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 18);
INSERT INTO B (s, t) VALUES (30, 11);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (30, 22);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO StartLabel VALUES (29)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:25:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 30);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 30);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 18);
INSERT INTO B (s, t) VALUES (30, 11);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (30, 22);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO StartLabel VALUES (29)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,timeout,false,18:30:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 30);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 29);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 29);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 26);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 30);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 8);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO A (s, t) VALUES (27, 8);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO A (s, t) VALUES (27, 26);
INSERT INTO A (s, t) VALUES (28, 12);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 18);
INSERT INTO B (s, t) VALUES (30, 11);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (30, 22);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO StartLabel VALUES (29)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,155,true,18:30:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 29);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 30);
INSERT INTO A (s, t) VALUES (25, 7);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO B (s, t) VALUES (30, 6);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,152,true,18:30:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 29);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 30);
INSERT INTO A (s, t) VALUES (25, 7);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO B (s, t) VALUES (30, 6);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,150,true,18:30:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 29);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 30);
INSERT INTO A (s, t) VALUES (25, 7);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO B (s, t) VALUES (30, 6);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
31,0.1,150,true,18:30:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (12, 29);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO A (s, t) VALUES (24, 30);
INSERT INTO A (s, t) VALUES (25, 7);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 16);
INSERT INTO B (s, t) VALUES (27, 23);
INSERT INTO A (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO B (s, t) VALUES (30, 6);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,18:40:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 29);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO A (s, t) VALUES (28, 18);
INSERT INTO A (s, t) VALUES (28, 28);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO B (s, t) VALUES (29, 10);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO B (s, t) VALUES (30, 17);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 31);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO A (s, t) VALUES (31, 16);
INSERT INTO A (s, t) VALUES (31, 24);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,18:45:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 29);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO A (s, t) VALUES (28, 18);
INSERT INTO A (s, t) VALUES (28, 28);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO B (s, t) VALUES (29, 10);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO B (s, t) VALUES (30, 17);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 31);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO A (s, t) VALUES (31, 16);
INSERT INTO A (s, t) VALUES (31, 24);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,18:50:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 29);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO A (s, t) VALUES (28, 18);
INSERT INTO A (s, t) VALUES (28, 28);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO B (s, t) VALUES (29, 10);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO B (s, t) VALUES (30, 17);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 31);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO A (s, t) VALUES (31, 16);
INSERT INTO A (s, t) VALUES (31, 24);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,18:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (2, 29);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 28);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 29);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO A (s, t) VALUES (28, 18);
INSERT INTO A (s, t) VALUES (28, 28);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO B (s, t) VALUES (29, 10);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO B (s, t) VALUES (30, 17);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 31);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO A (s, t) VALUES (31, 16);
INSERT INTO A (s, t) VALUES (31, 24);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (24)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:05:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 31);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 29);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 29);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 30);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO A (s, t) VALUES (31, 20);
INSERT INTO A (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:10:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 31);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 29);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 29);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 30);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO A (s, t) VALUES (31, 20);
INSERT INTO A (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:15:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 31);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 29);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 29);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 30);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO A (s, t) VALUES (31, 20);
INSERT INTO A (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:20:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 31);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 29);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (8, 29);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 30);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 28);
INSERT INTO A (s, t) VALUES (27, 3);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 20);
INSERT INTO A (s, t) VALUES (28, 26);
INSERT INTO B (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 16);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO A (s, t) VALUES (31, 20);
INSERT INTO A (s, t) VALUES (31, 25);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:30:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (1, 31);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 30);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 6);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (30, 31);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 21);
INSERT INTO B (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (28)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:35:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (1, 31);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 30);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 6);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (30, 31);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 21);
INSERT INTO B (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (28)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:40:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (1, 31);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 30);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 6);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (30, 31);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 21);
INSERT INTO B (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (28)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,timeout,false,19:45:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO A (s, t) VALUES (1, 31);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 30);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 30);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 29);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO B (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (28, 6);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO A (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (30, 31);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 21);
INSERT INTO B (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (28)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,1835,false,19:45:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 28);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (17, 29);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (24, 31);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 13);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,1843,false,19:45:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 28);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (17, 29);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (24, 31);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 13);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,1810,false,19:45:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 28);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (17, 29);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (24, 31);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 13);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,1837,false,19:45:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 28);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 27);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO A (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (17, 29);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (24, 31);
INSERT INTO A (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 26);
INSERT INTO A (s, t) VALUES (27, 2);
INSERT INTO A (s, t) VALUES (27, 9);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO B (s, t) VALUES (30, 13);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,978,false,19:45:55
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,965,false,19:45:56
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,964,false,19:45:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
32,0.1,964,false,19:45:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (13, 30);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 24);
INSERT INTO B (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 27);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (28, 30);
INSERT INTO A (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 11);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO B (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 15);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,25588,false,19:46:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 30);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 31);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (19, 29);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (20, 32);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 16);
INSERT INTO A (s, t) VALUES (31, 0);
INSERT INTO B (s, t) VALUES (32, 7);
INSERT INTO B (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 20);
INSERT INTO A (s, t) VALUES (32, 22);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO B (s, t) VALUES (32, 31);
INSERT INTO StartLabel VALUES (28)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,25470,false,19:47:15
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 30);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 31);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (19, 29);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (20, 32);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 16);
INSERT INTO A (s, t) VALUES (31, 0);
INSERT INTO B (s, t) VALUES (32, 7);
INSERT INTO B (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 20);
INSERT INTO A (s, t) VALUES (32, 22);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO B (s, t) VALUES (32, 31);
INSERT INTO StartLabel VALUES (28)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,25466,false,19:47:41
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 30);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 31);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (19, 29);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (20, 32);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 16);
INSERT INTO A (s, t) VALUES (31, 0);
INSERT INTO B (s, t) VALUES (32, 7);
INSERT INTO B (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 20);
INSERT INTO A (s, t) VALUES (32, 22);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO B (s, t) VALUES (32, 31);
INSERT INTO StartLabel VALUES (28)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,25289,false,19:48:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (2, 30);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 31);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (19, 27);
INSERT INTO A (s, t) VALUES (19, 29);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (20, 32);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO B (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO A (s, t) VALUES (25, 29);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 13);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 3);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 16);
INSERT INTO A (s, t) VALUES (31, 0);
INSERT INTO B (s, t) VALUES (32, 7);
INSERT INTO B (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 20);
INSERT INTO A (s, t) VALUES (32, 22);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO B (s, t) VALUES (32, 31);
INSERT INTO StartLabel VALUES (28)
INSERT INTO EndLabel VALUES (26)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3346,false,19:48:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (2, 32);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 32);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (12, 29);
INSERT INTO A (s, t) VALUES (12, 32);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (27, 0);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 10);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO A (s, t) VALUES (29, 5);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3436,false,19:48:16
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (2, 32);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 32);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (12, 29);
INSERT INTO A (s, t) VALUES (12, 32);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (27, 0);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 10);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO A (s, t) VALUES (29, 5);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3402,false,19:48:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (2, 32);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 32);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (12, 29);
INSERT INTO A (s, t) VALUES (12, 32);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (27, 0);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 10);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO A (s, t) VALUES (29, 5);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3451,false,19:48:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (2, 32);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 24);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 32);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (12, 29);
INSERT INTO A (s, t) VALUES (12, 32);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO A (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO B (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (27, 0);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 7);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 10);
INSERT INTO B (s, t) VALUES (28, 16);
INSERT INTO B (s, t) VALUES (28, 19);
INSERT INTO A (s, t) VALUES (29, 5);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO B (s, t) VALUES (30, 7);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 25);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,38,true,19:48:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO B (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 32);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 31);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (32, 10);
INSERT INTO A (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 23);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,38,true,19:48:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO B (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 32);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 31);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (32, 10);
INSERT INTO A (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 23);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,38,true,19:48:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO B (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 32);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 31);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (32, 10);
INSERT INTO A (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 23);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,38,true,19:48:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 32);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (14, 28);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (15, 28);
INSERT INTO B (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (20, 25);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 32);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 15);
INSERT INTO B (s, t) VALUES (26, 22);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 17);
INSERT INTO B (s, t) VALUES (27, 18);
INSERT INTO B (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 24);
INSERT INTO B (s, t) VALUES (28, 23);
INSERT INTO B (s, t) VALUES (29, 17);
INSERT INTO B (s, t) VALUES (29, 31);
INSERT INTO A (s, t) VALUES (30, 8);
INSERT INTO A (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (32, 10);
INSERT INTO A (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 23);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3126,false,19:48:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 31);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (4, 29);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 32);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 29);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 31);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (28, 25);
INSERT INTO B (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 12);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO A (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (29, 31);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 29);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3125,false,19:48:33
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 31);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (4, 29);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 32);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 29);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 31);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (28, 25);
INSERT INTO B (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 12);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO A (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (29, 31);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 29);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3122,false,19:48:36
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 31);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (4, 29);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 32);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 29);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 31);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (28, 25);
INSERT INTO B (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 12);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO A (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (29, 31);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 29);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,3078,false,19:48:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (2, 31);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (4, 29);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (5, 32);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 31);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 31);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (10, 26);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 29);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 27);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (25, 29);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO A (s, t) VALUES (26, 9);
INSERT INTO B (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 31);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (28, 25);
INSERT INTO B (s, t) VALUES (29, 2);
INSERT INTO A (s, t) VALUES (29, 12);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO A (s, t) VALUES (29, 23);
INSERT INTO A (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (29, 31);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 29);
INSERT INTO B (s, t) VALUES (31, 19);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (32, 24);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,30,false,19:48:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 24);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 30);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 11);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 13);
INSERT INTO B (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,30,false,19:48:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 24);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 30);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 11);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 13);
INSERT INTO B (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,30,false,19:48:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 24);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 30);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 11);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 13);
INSERT INTO B (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
33,0.1,30,false,19:48:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (0, 30);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 28);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 28);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 24);
INSERT INTO A (s, t) VALUES (11, 26);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 26);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO A (s, t) VALUES (22, 28);
INSERT INTO A (s, t) VALUES (22, 30);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 1);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 24);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 16);
INSERT INTO A (s, t) VALUES (26, 25);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 11);
INSERT INTO B (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO B (s, t) VALUES (28, 29);
INSERT INTO B (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 13);
INSERT INTO B (s, t) VALUES (29, 19);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (30, 3);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO A (s, t) VALUES (31, 30);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,3385,false,19:48:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO B (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO B (s, t) VALUES (9, 33);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 31);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 30);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 33);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO A (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 10);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 22);
INSERT INTO A (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 16);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO B (s, t) VALUES (33, 20);
INSERT INTO B (s, t) VALUES (33, 24);
INSERT INTO B (s, t) VALUES (33, 31);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,3414,false,19:48:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO B (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO B (s, t) VALUES (9, 33);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 31);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 30);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 33);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO A (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 10);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 22);
INSERT INTO A (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 16);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO B (s, t) VALUES (33, 20);
INSERT INTO B (s, t) VALUES (33, 24);
INSERT INTO B (s, t) VALUES (33, 31);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,3409,false,19:48:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO B (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO B (s, t) VALUES (9, 33);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 31);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 30);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 33);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO A (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 10);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 22);
INSERT INTO A (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 16);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO B (s, t) VALUES (33, 20);
INSERT INTO B (s, t) VALUES (33, 24);
INSERT INTO B (s, t) VALUES (33, 31);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,3351,false,19:48:56
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 27);
INSERT INTO B (s, t) VALUES (0, 29);
INSERT INTO B (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (1, 29);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 26);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO A (s, t) VALUES (6, 31);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 28);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO B (s, t) VALUES (9, 33);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 31);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 30);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO A (s, t) VALUES (14, 26);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (15, 30);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 31);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (17, 30);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (24, 33);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO A (s, t) VALUES (25, 30);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO B (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO A (s, t) VALUES (27, 25);
INSERT INTO B (s, t) VALUES (28, 9);
INSERT INTO A (s, t) VALUES (28, 10);
INSERT INTO A (s, t) VALUES (28, 17);
INSERT INTO B (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO B (s, t) VALUES (29, 1);
INSERT INTO B (s, t) VALUES (30, 2);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 22);
INSERT INTO A (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (31, 28);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 16);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO B (s, t) VALUES (33, 20);
INSERT INTO B (s, t) VALUES (33, 24);
INSERT INTO B (s, t) VALUES (33, 31);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (24)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,116051,false,19:52:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (3, 29);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 32);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 33);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO B (s, t) VALUES (27, 27);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 4);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (29, 32);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO A (s, t) VALUES (30, 17);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO A (s, t) VALUES (30, 30);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 3);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 9);
INSERT INTO A (s, t) VALUES (32, 26);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,119472,false,19:54:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (3, 29);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 32);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 33);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO B (s, t) VALUES (27, 27);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 4);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (29, 32);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO A (s, t) VALUES (30, 17);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO A (s, t) VALUES (30, 30);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 3);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 9);
INSERT INTO A (s, t) VALUES (32, 26);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,119469,false,19:56:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (3, 29);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 32);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 33);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO B (s, t) VALUES (27, 27);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 4);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (29, 32);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO A (s, t) VALUES (30, 17);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO A (s, t) VALUES (30, 30);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 3);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 9);
INSERT INTO A (s, t) VALUES (32, 26);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,119467,false,19:58:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 32);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (3, 29);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 32);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 30);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 27);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 32);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 28);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (11, 33);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO A (s, t) VALUES (13, 27);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO B (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 28);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (19, 30);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO B (s, t) VALUES (20, 26);
INSERT INTO B (s, t) VALUES (20, 27);
INSERT INTO B (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 27);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO B (s, t) VALUES (24, 18);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 11);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (27, 2);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 11);
INSERT INTO A (s, t) VALUES (27, 21);
INSERT INTO B (s, t) VALUES (27, 27);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 26);
INSERT INTO A (s, t) VALUES (28, 29);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 4);
INSERT INTO A (s, t) VALUES (29, 8);
INSERT INTO B (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (29, 32);
INSERT INTO B (s, t) VALUES (30, 4);
INSERT INTO A (s, t) VALUES (30, 17);
INSERT INTO A (s, t) VALUES (30, 21);
INSERT INTO B (s, t) VALUES (30, 24);
INSERT INTO B (s, t) VALUES (30, 25);
INSERT INTO A (s, t) VALUES (30, 30);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 3);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 9);
INSERT INTO A (s, t) VALUES (32, 26);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,53728,true,20:00:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 32);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 33);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 28);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 33);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (19, 32);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 32);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO B (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 22);
INSERT INTO B (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO B (s, t) VALUES (32, 5);
INSERT INTO A (s, t) VALUES (32, 6);
INSERT INTO B (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 18);
INSERT INTO A (s, t) VALUES (32, 21);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO A (s, t) VALUES (33, 12);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,52295,true,20:01:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 32);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 33);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 28);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 33);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (19, 32);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 32);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO B (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 22);
INSERT INTO B (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO B (s, t) VALUES (32, 5);
INSERT INTO A (s, t) VALUES (32, 6);
INSERT INTO B (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 18);
INSERT INTO A (s, t) VALUES (32, 21);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO A (s, t) VALUES (33, 12);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,52543,true,20:02:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 32);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 33);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 28);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 33);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (19, 32);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 32);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO B (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 22);
INSERT INTO B (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO B (s, t) VALUES (32, 5);
INSERT INTO A (s, t) VALUES (32, 6);
INSERT INTO B (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 18);
INSERT INTO A (s, t) VALUES (32, 21);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO A (s, t) VALUES (33, 12);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,52002,true,20:03:15
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (9, 32);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 33);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 28);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 33);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (19, 28);
INSERT INTO A (s, t) VALUES (19, 32);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 29);
INSERT INTO A (s, t) VALUES (20, 31);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO B (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 32);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO B (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (26, 14);
INSERT INTO B (s, t) VALUES (27, 1);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 13);
INSERT INTO A (s, t) VALUES (28, 1);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO B (s, t) VALUES (28, 14);
INSERT INTO B (s, t) VALUES (28, 24);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO A (s, t) VALUES (30, 9);
INSERT INTO B (s, t) VALUES (30, 18);
INSERT INTO B (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (30, 27);
INSERT INTO B (s, t) VALUES (31, 1);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 13);
INSERT INTO A (s, t) VALUES (31, 22);
INSERT INTO B (s, t) VALUES (31, 26);
INSERT INTO A (s, t) VALUES (32, 0);
INSERT INTO B (s, t) VALUES (32, 5);
INSERT INTO A (s, t) VALUES (32, 6);
INSERT INTO B (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 17);
INSERT INTO B (s, t) VALUES (32, 18);
INSERT INTO A (s, t) VALUES (32, 21);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO A (s, t) VALUES (33, 8);
INSERT INTO A (s, t) VALUES (33, 12);
INSERT INTO StartLabel VALUES (27)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,4424,false,20:03:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 32);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 33);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (18, 32);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO B (s, t) VALUES (28, 28);
INSERT INTO B (s, t) VALUES (29, 3);
INSERT INTO A (s, t) VALUES (29, 6);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO A (s, t) VALUES (30, 20);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 12);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 17);
INSERT INTO B (s, t) VALUES (31, 31);
INSERT INTO B (s, t) VALUES (31, 32);
INSERT INTO A (s, t) VALUES (32, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,4420,false,20:03:28
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 32);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 33);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (18, 32);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO B (s, t) VALUES (28, 28);
INSERT INTO B (s, t) VALUES (29, 3);
INSERT INTO A (s, t) VALUES (29, 6);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO A (s, t) VALUES (30, 20);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 12);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 17);
INSERT INTO B (s, t) VALUES (31, 31);
INSERT INTO B (s, t) VALUES (31, 32);
INSERT INTO A (s, t) VALUES (32, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,4584,false,20:03:33
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 32);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 33);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (18, 32);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO B (s, t) VALUES (28, 28);
INSERT INTO B (s, t) VALUES (29, 3);
INSERT INTO A (s, t) VALUES (29, 6);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO A (s, t) VALUES (30, 20);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 12);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 17);
INSERT INTO B (s, t) VALUES (31, 31);
INSERT INTO B (s, t) VALUES (31, 32);
INSERT INTO A (s, t) VALUES (32, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,4833,false,20:03:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (3, 32);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (4, 27);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 27);
INSERT INTO B (s, t) VALUES (7, 30);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (8, 32);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 32);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 29);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 33);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 30);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 27);
INSERT INTO B (s, t) VALUES (18, 32);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 28);
INSERT INTO B (s, t) VALUES (21, 30);
INSERT INTO A (s, t) VALUES (21, 31);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO A (s, t) VALUES (25, 21);
INSERT INTO A (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 29);
INSERT INTO B (s, t) VALUES (27, 5);
INSERT INTO B (s, t) VALUES (27, 8);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 17);
INSERT INTO A (s, t) VALUES (28, 13);
INSERT INTO B (s, t) VALUES (28, 28);
INSERT INTO B (s, t) VALUES (29, 3);
INSERT INTO A (s, t) VALUES (29, 6);
INSERT INTO A (s, t) VALUES (29, 13);
INSERT INTO A (s, t) VALUES (29, 20);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO A (s, t) VALUES (30, 20);
INSERT INTO A (s, t) VALUES (30, 26);
INSERT INTO A (s, t) VALUES (31, 1);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO A (s, t) VALUES (31, 12);
INSERT INTO A (s, t) VALUES (31, 14);
INSERT INTO B (s, t) VALUES (31, 17);
INSERT INTO B (s, t) VALUES (31, 31);
INSERT INTO B (s, t) VALUES (31, 32);
INSERT INTO A (s, t) VALUES (32, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,timeout,false,20:13:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 30);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 31);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 5);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 7);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (32, 27);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,timeout,false,20:18:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 30);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 31);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 5);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 7);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (32, 27);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,timeout,false,20:23:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 30);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 31);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 5);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 7);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (32, 27);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
34,0.1,timeout,false,20:28:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 30);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 27);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 27);
INSERT INTO B (s, t) VALUES (9, 31);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO A (s, t) VALUES (11, 31);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 32);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO A (s, t) VALUES (14, 29);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO B (s, t) VALUES (18, 28);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 30);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 31);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 24);
INSERT INTO B (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 22);
INSERT INTO A (s, t) VALUES (27, 28);
INSERT INTO B (s, t) VALUES (28, 2);
INSERT INTO B (s, t) VALUES (28, 5);
INSERT INTO B (s, t) VALUES (28, 6);
INSERT INTO B (s, t) VALUES (28, 8);
INSERT INTO A (s, t) VALUES (29, 9);
INSERT INTO A (s, t) VALUES (29, 15);
INSERT INTO B (s, t) VALUES (29, 24);
INSERT INTO A (s, t) VALUES (30, 1);
INSERT INTO A (s, t) VALUES (30, 7);
INSERT INTO A (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (31, 7);
INSERT INTO B (s, t) VALUES (31, 9);
INSERT INTO B (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (32, 27);
INSERT INTO A (s, t) VALUES (32, 30);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,20:38:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 31);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 34);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 32);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (12, 31);
INSERT INTO B (s, t) VALUES (12, 33);
INSERT INTO A (s, t) VALUES (12, 34);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (16, 33);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 32);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (25, 33);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 32);
INSERT INTO A (s, t) VALUES (27, 34);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO B (s, t) VALUES (28, 4);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (29, 34);
INSERT INTO A (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO B (s, t) VALUES (32, 12);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 0);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO B (s, t) VALUES (34, 3);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO B (s, t) VALUES (34, 13);
INSERT INTO B (s, t) VALUES (34, 15);
INSERT INTO A (s, t) VALUES (34, 23);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,20:43:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 31);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 34);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 32);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (12, 31);
INSERT INTO B (s, t) VALUES (12, 33);
INSERT INTO A (s, t) VALUES (12, 34);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (16, 33);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 32);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (25, 33);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 32);
INSERT INTO A (s, t) VALUES (27, 34);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO B (s, t) VALUES (28, 4);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (29, 34);
INSERT INTO A (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO B (s, t) VALUES (32, 12);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 0);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO B (s, t) VALUES (34, 3);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO B (s, t) VALUES (34, 13);
INSERT INTO B (s, t) VALUES (34, 15);
INSERT INTO A (s, t) VALUES (34, 23);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,20:48:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 31);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 34);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 32);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (12, 31);
INSERT INTO B (s, t) VALUES (12, 33);
INSERT INTO A (s, t) VALUES (12, 34);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (16, 33);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 32);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (25, 33);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 32);
INSERT INTO A (s, t) VALUES (27, 34);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO B (s, t) VALUES (28, 4);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (29, 34);
INSERT INTO A (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO B (s, t) VALUES (32, 12);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 0);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO B (s, t) VALUES (34, 3);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO B (s, t) VALUES (34, 13);
INSERT INTO B (s, t) VALUES (34, 15);
INSERT INTO A (s, t) VALUES (34, 23);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,20:53:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 31);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO A (s, t) VALUES (1, 29);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 34);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 31);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 26);
INSERT INTO A (s, t) VALUES (5, 27);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 32);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (12, 31);
INSERT INTO B (s, t) VALUES (12, 33);
INSERT INTO A (s, t) VALUES (12, 34);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 28);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 32);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (16, 29);
INSERT INTO B (s, t) VALUES (16, 33);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 32);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 28);
INSERT INTO A (s, t) VALUES (20, 33);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO B (s, t) VALUES (21, 29);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 7);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (25, 27);
INSERT INTO A (s, t) VALUES (25, 32);
INSERT INTO B (s, t) VALUES (25, 33);
INSERT INTO B (s, t) VALUES (26, 8);
INSERT INTO B (s, t) VALUES (26, 25);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO A (s, t) VALUES (27, 14);
INSERT INTO A (s, t) VALUES (27, 32);
INSERT INTO A (s, t) VALUES (27, 34);
INSERT INTO B (s, t) VALUES (28, 0);
INSERT INTO B (s, t) VALUES (28, 4);
INSERT INTO B (s, t) VALUES (28, 7);
INSERT INTO B (s, t) VALUES (28, 31);
INSERT INTO A (s, t) VALUES (29, 25);
INSERT INTO A (s, t) VALUES (29, 30);
INSERT INTO B (s, t) VALUES (29, 34);
INSERT INTO A (s, t) VALUES (30, 10);
INSERT INTO B (s, t) VALUES (30, 23);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 8);
INSERT INTO A (s, t) VALUES (31, 10);
INSERT INTO B (s, t) VALUES (31, 33);
INSERT INTO B (s, t) VALUES (32, 3);
INSERT INTO B (s, t) VALUES (32, 12);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 0);
INSERT INTO A (s, t) VALUES (33, 14);
INSERT INTO B (s, t) VALUES (34, 3);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO B (s, t) VALUES (34, 13);
INSERT INTO B (s, t) VALUES (34, 15);
INSERT INTO A (s, t) VALUES (34, 23);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (16)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,21:03:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 33);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 33);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 34);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO A (s, t) VALUES (17, 31);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 34);
INSERT INTO A (s, t) VALUES (21, 33);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (25, 31);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (26, 33);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (27, 30);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO B (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 4);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 11);
INSERT INTO A (s, t) VALUES (31, 19);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO A (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 4);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 20);
INSERT INTO B (s, t) VALUES (32, 22);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO B (s, t) VALUES (33, 2);
INSERT INTO A (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 10);
INSERT INTO A (s, t) VALUES (33, 22);
INSERT INTO B (s, t) VALUES (33, 33);
INSERT INTO A (s, t) VALUES (34, 2);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO A (s, t) VALUES (34, 28);
INSERT INTO B (s, t) VALUES (34, 33);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (27)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,21:08:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 33);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 33);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 34);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO A (s, t) VALUES (17, 31);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 34);
INSERT INTO A (s, t) VALUES (21, 33);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (25, 31);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (26, 33);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (27, 30);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO B (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 4);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 11);
INSERT INTO A (s, t) VALUES (31, 19);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO A (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 4);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 20);
INSERT INTO B (s, t) VALUES (32, 22);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO B (s, t) VALUES (33, 2);
INSERT INTO A (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 10);
INSERT INTO A (s, t) VALUES (33, 22);
INSERT INTO B (s, t) VALUES (33, 33);
INSERT INTO A (s, t) VALUES (34, 2);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO A (s, t) VALUES (34, 28);
INSERT INTO B (s, t) VALUES (34, 33);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (27)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,21:13:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 33);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 33);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 34);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO A (s, t) VALUES (17, 31);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 34);
INSERT INTO A (s, t) VALUES (21, 33);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (25, 31);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (26, 33);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (27, 30);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO B (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 4);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 11);
INSERT INTO A (s, t) VALUES (31, 19);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO A (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 4);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 20);
INSERT INTO B (s, t) VALUES (32, 22);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO B (s, t) VALUES (33, 2);
INSERT INTO A (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 10);
INSERT INTO A (s, t) VALUES (33, 22);
INSERT INTO B (s, t) VALUES (33, 33);
INSERT INTO A (s, t) VALUES (34, 2);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO A (s, t) VALUES (34, 28);
INSERT INTO B (s, t) VALUES (34, 33);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (27)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,timeout,false,21:18:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (0, 28);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 28);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 33);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO B (s, t) VALUES (7, 28);
INSERT INTO A (s, t) VALUES (7, 33);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 34);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 29);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO A (s, t) VALUES (13, 31);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (14, 30);
INSERT INTO B (s, t) VALUES (14, 31);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 24);
INSERT INTO A (s, t) VALUES (15, 32);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 30);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO A (s, t) VALUES (17, 31);
INSERT INTO A (s, t) VALUES (17, 32);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 33);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 34);
INSERT INTO A (s, t) VALUES (21, 33);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 27);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (25, 28);
INSERT INTO A (s, t) VALUES (25, 31);
INSERT INTO A (s, t) VALUES (26, 5);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 27);
INSERT INTO A (s, t) VALUES (26, 29);
INSERT INTO A (s, t) VALUES (26, 33);
INSERT INTO A (s, t) VALUES (27, 6);
INSERT INTO B (s, t) VALUES (27, 29);
INSERT INTO A (s, t) VALUES (27, 30);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 16);
INSERT INTO A (s, t) VALUES (28, 19);
INSERT INTO B (s, t) VALUES (29, 7);
INSERT INTO A (s, t) VALUES (29, 10);
INSERT INTO B (s, t) VALUES (29, 14);
INSERT INTO A (s, t) VALUES (29, 17);
INSERT INTO A (s, t) VALUES (29, 26);
INSERT INTO B (s, t) VALUES (29, 28);
INSERT INTO B (s, t) VALUES (30, 12);
INSERT INTO A (s, t) VALUES (30, 18);
INSERT INTO A (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 4);
INSERT INTO B (s, t) VALUES (31, 5);
INSERT INTO B (s, t) VALUES (31, 11);
INSERT INTO A (s, t) VALUES (31, 19);
INSERT INTO B (s, t) VALUES (31, 24);
INSERT INTO A (s, t) VALUES (32, 1);
INSERT INTO B (s, t) VALUES (32, 4);
INSERT INTO A (s, t) VALUES (32, 11);
INSERT INTO A (s, t) VALUES (32, 20);
INSERT INTO B (s, t) VALUES (32, 22);
INSERT INTO B (s, t) VALUES (32, 32);
INSERT INTO B (s, t) VALUES (33, 2);
INSERT INTO A (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 10);
INSERT INTO A (s, t) VALUES (33, 22);
INSERT INTO B (s, t) VALUES (33, 33);
INSERT INTO A (s, t) VALUES (34, 2);
INSERT INTO A (s, t) VALUES (34, 7);
INSERT INTO A (s, t) VALUES (34, 28);
INSERT INTO B (s, t) VALUES (34, 33);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (27)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,2909,false,21:18:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 33);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 34);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (4, 33);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 30);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 32);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (18, 29);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 32);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (23, 33);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO B (s, t) VALUES (27, 33);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 5);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 32);
INSERT INTO A (s, t) VALUES (28, 34);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 12);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 0);
INSERT INTO B (s, t) VALUES (30, 14);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (30, 30);
INSERT INTO B (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO B (s, t) VALUES (31, 6);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO B (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 16);
INSERT INTO A (s, t) VALUES (33, 27);
INSERT INTO B (s, t) VALUES (34, 6);
INSERT INTO A (s, t) VALUES (34, 9);
INSERT INTO A (s, t) VALUES (34, 27);
INSERT INTO B (s, t) VALUES (34, 31);
INSERT INTO StartLabel VALUES (30)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,2885,false,21:18:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 33);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 34);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (4, 33);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 30);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 32);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (18, 29);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 32);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (23, 33);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO B (s, t) VALUES (27, 33);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 5);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 32);
INSERT INTO A (s, t) VALUES (28, 34);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 12);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 0);
INSERT INTO B (s, t) VALUES (30, 14);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (30, 30);
INSERT INTO B (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO B (s, t) VALUES (31, 6);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO B (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 16);
INSERT INTO A (s, t) VALUES (33, 27);
INSERT INTO B (s, t) VALUES (34, 6);
INSERT INTO A (s, t) VALUES (34, 9);
INSERT INTO A (s, t) VALUES (34, 27);
INSERT INTO B (s, t) VALUES (34, 31);
INSERT INTO StartLabel VALUES (30)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,2897,false,21:18:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 33);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 34);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (4, 33);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 30);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 32);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (18, 29);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 32);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (23, 33);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO B (s, t) VALUES (27, 33);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 5);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 32);
INSERT INTO A (s, t) VALUES (28, 34);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 12);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 0);
INSERT INTO B (s, t) VALUES (30, 14);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (30, 30);
INSERT INTO B (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO B (s, t) VALUES (31, 6);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO B (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 16);
INSERT INTO A (s, t) VALUES (33, 27);
INSERT INTO B (s, t) VALUES (34, 6);
INSERT INTO A (s, t) VALUES (34, 9);
INSERT INTO A (s, t) VALUES (34, 27);
INSERT INTO B (s, t) VALUES (34, 31);
INSERT INTO StartLabel VALUES (30)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
35,0.1,2983,false,21:18:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE TABLE A (id serial, s int, t int, primary key(s,t));
CREATE TABLE B (id serial, s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 33);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO B (s, t) VALUES (1, 28);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 34);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (4, 27);
INSERT INTO A (s, t) VALUES (4, 31);
INSERT INTO B (s, t) VALUES (4, 33);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (6, 30);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (10, 30);
INSERT INTO B (s, t) VALUES (10, 31);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 29);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 32);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (13, 31);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO A (s, t) VALUES (18, 29);
INSERT INTO A (s, t) VALUES (18, 31);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 32);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 28);
INSERT INTO A (s, t) VALUES (23, 29);
INSERT INTO A (s, t) VALUES (23, 33);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (24, 28);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO B (s, t) VALUES (26, 6);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO B (s, t) VALUES (27, 33);
INSERT INTO B (s, t) VALUES (28, 3);
INSERT INTO A (s, t) VALUES (28, 5);
INSERT INTO A (s, t) VALUES (28, 22);
INSERT INTO B (s, t) VALUES (28, 32);
INSERT INTO A (s, t) VALUES (28, 34);
INSERT INTO A (s, t) VALUES (29, 0);
INSERT INTO B (s, t) VALUES (29, 12);
INSERT INTO B (s, t) VALUES (29, 22);
INSERT INTO A (s, t) VALUES (29, 29);
INSERT INTO A (s, t) VALUES (30, 0);
INSERT INTO B (s, t) VALUES (30, 14);
INSERT INTO B (s, t) VALUES (30, 19);
INSERT INTO B (s, t) VALUES (30, 30);
INSERT INTO B (s, t) VALUES (30, 32);
INSERT INTO A (s, t) VALUES (31, 2);
INSERT INTO B (s, t) VALUES (31, 6);
INSERT INTO B (s, t) VALUES (31, 29);
INSERT INTO B (s, t) VALUES (32, 15);
INSERT INTO A (s, t) VALUES (32, 34);
INSERT INTO A (s, t) VALUES (33, 4);
INSERT INTO B (s, t) VALUES (33, 9);
INSERT INTO A (s, t) VALUES (33, 16);
INSERT INTO A (s, t) VALUES (33, 27);
INSERT INTO B (s, t) VALUES (34, 6);
INSERT INTO A (s, t) VALUES (34, 9);
INSERT INTO A (s, t) VALUES (34, 27);
INSERT INTO B (s, t) VALUES (34, 31);
INSERT INTO StartLabel VALUES (30)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s, A.t, a_kleene_star.depth+1,
				a_kleene_star.path||A.t,
				a_kleene_star.edges ||
				concat(A.s||'.',A.t)
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t)=any(a_kleene_star.edges)
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
