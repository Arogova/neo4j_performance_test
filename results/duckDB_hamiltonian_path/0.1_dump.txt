seed = 1736348621125827729
2,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,2,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,6,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,9,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,9,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,9,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,9,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,6,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.1,6,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,3,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,7,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,8,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,8,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,8,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,4,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,9,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,5,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,4,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,9,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,9,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,9,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,9,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,11,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.1,10,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,12,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,13,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,11,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,12,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,3,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,8,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,6,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.1,7,true,16:03:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,9,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,9,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,9,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,10,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,12,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,12,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,12,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,17,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,18,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,18,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,4,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,15,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,14,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.1,13,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,19,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,20,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,20,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,19,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,5,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,6,true,16:03:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,53,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,53,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,55,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,54,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,19,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,18,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,17,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,18,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,6,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,7,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,6,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.1,6,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,19,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,17,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,18,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,18,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,17,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,14,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,16,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,16,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,7,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,7,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,6,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,7,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,12,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,13,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.1,11,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,19,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,19,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,20,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,20,true,16:03:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,20,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,20,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,18,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,18,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,23,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,23,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,20,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,21,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,11,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,10,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,11,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,10,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,7,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,6,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,6,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.1,6,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,17,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,17,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,8,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,8,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,8,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,7,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,19,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,20,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,17,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,17,true,16:03:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,643,true,16:03:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,654,true,16:03:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,636,true,16:03:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,654,true,16:03:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.1,16,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,18,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,17,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,17,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,17,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,26,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,26,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,25,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,28,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,23,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,24,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,24,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,24,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,62,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,64,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,62,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,63,true,16:03:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,38,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,38,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,37,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.1,37,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,39,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,39,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,40,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,39,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,19,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,19,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,19,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,19,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,11,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,12,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,11,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,11,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,25,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,25,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,25,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,25,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,22,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,22,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,22,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.1,22,true,16:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,278,true,16:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,278,true,16:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,276,true,16:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,281,true,16:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,131,true,16:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,127,true,16:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,128,true,16:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,143,true,16:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,265,true,16:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,270,true,16:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,262,true,16:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,271,true,16:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,156,true,16:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,157,true,16:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,156,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,159,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,38,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,39,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,39,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.1,38,true,16:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,195,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,195,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,196,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,196,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,33,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,32,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,31,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,31,true,16:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,91,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,91,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,92,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,91,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,26,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,25,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,25,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,25,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,36,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,37,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,36,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.1,37,true,16:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,505,true,16:03:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,502,true,16:03:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,510,true,16:03:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,513,true,16:04:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,131,true,16:04:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,131,true,16:04:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,133,true,16:04:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,130,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,93,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,94,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,92,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,93,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,25,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,24,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,25,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,25,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 20);
INSERT INTO G VALUES (20, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (20, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,60,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,59,true,16:04:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,59,true,16:04:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
23,0.1,59,true,16:04:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,211,true,16:04:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,209,true,16:04:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,213,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,211,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,99,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,110,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,98,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,99,true,16:04:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,15766,true,16:04:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,15539,true,16:04:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,15918,true,16:05:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,16691,true,16:05:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,685,true,16:05:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,696,true,16:05:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,717,true,16:05:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,693,true,16:05:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,919,true,16:05:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 23);
INSERT INTO G VALUES (23, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 20);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,912,true,16:05:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 23);
INSERT INTO G VALUES (23, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 20);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,960,true,16:05:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 23);
INSERT INTO G VALUES (23, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 20);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
24,0.1,945,true,16:05:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 23);
INSERT INTO G VALUES (23, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (18, 20);
INSERT INTO G VALUES (20, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 20);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,152,true,16:05:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 22);
INSERT INTO G VALUES (22, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (14, 23);
INSERT INTO G VALUES (23, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,155,true,16:05:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 22);
INSERT INTO G VALUES (22, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (14, 23);
INSERT INTO G VALUES (23, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,153,true,16:05:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 22);
INSERT INTO G VALUES (22, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (14, 23);
INSERT INTO G VALUES (23, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,153,true,16:05:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 22);
INSERT INTO G VALUES (22, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 22);
INSERT INTO G VALUES (22, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 22);
INSERT INTO G VALUES (22, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (14, 23);
INSERT INTO G VALUES (23, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,8584,true,16:05:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,8655,true,16:05:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,8566,true,16:06:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,9002,true,16:06:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,100,true,16:06:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,81,true,16:06:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,81,true,16:06:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,81,true,16:06:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (17, 19);
INSERT INTO G VALUES (19, 17);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2741,true,16:06:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2930,true,16:06:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2857,true,16:06:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2890,true,16:06:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2125,true,16:06:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2174,true,16:06:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,2066,true,16:06:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
25,0.1,1845,true,16:06:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (17, 23);
INSERT INTO G VALUES (23, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,4216,true,16:06:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 25);
INSERT INTO G VALUES (25, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,4319,true,16:06:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 25);
INSERT INTO G VALUES (25, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,4409,true,16:06:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 25);
INSERT INTO G VALUES (25, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,4161,true,16:07:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 25);
INSERT INTO G VALUES (25, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,177,true,16:07:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,176,true,16:07:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,175,true,16:07:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,176,true,16:07:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 21);
INSERT INTO G VALUES (21, 14);
INSERT INTO G VALUES (14, 25);
INSERT INTO G VALUES (25, 14);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,350,true,16:07:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 23);
INSERT INTO G VALUES (23, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,346,true,16:07:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 23);
INSERT INTO G VALUES (23, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,354,true,16:07:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 23);
INSERT INTO G VALUES (23, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,366,true,16:07:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 23);
INSERT INTO G VALUES (23, 20);
INSERT INTO G VALUES (22, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,18777,true,16:07:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (6, 23);
INSERT INTO G VALUES (23, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (11, 25);
INSERT INTO G VALUES (25, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,18668,true,16:08:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (6, 23);
INSERT INTO G VALUES (23, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (11, 25);
INSERT INTO G VALUES (25, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,18635,true,16:08:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (6, 23);
INSERT INTO G VALUES (23, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (11, 25);
INSERT INTO G VALUES (25, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,18967,true,16:08:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (1, 23);
INSERT INTO G VALUES (23, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (6, 23);
INSERT INTO G VALUES (23, 6);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (11, 25);
INSERT INTO G VALUES (25, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 23);
INSERT INTO G VALUES (23, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,69,true,16:08:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 25);
INSERT INTO G VALUES (25, 8);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (25, 25);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,69,true,16:08:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 25);
INSERT INTO G VALUES (25, 8);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (25, 25);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,69,true,16:08:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 25);
INSERT INTO G VALUES (25, 8);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (25, 25);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
26,0.1,68,true,16:08:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 24);
INSERT INTO G VALUES (24, 4);
INSERT INTO G VALUES (4, 25);
INSERT INTO G VALUES (25, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 25);
INSERT INTO G VALUES (25, 8);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (25, 25);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,3284,true,16:08:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 24);
INSERT INTO G VALUES (24, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 23);
INSERT INTO G VALUES (23, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 24);
INSERT INTO G VALUES (24, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,3154,true,16:08:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 24);
INSERT INTO G VALUES (24, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 23);
INSERT INTO G VALUES (23, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 24);
INSERT INTO G VALUES (24, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,2693,true,16:08:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 24);
INSERT INTO G VALUES (24, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 23);
INSERT INTO G VALUES (23, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 24);
INSERT INTO G VALUES (24, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,2928,true,16:08:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (0, 24);
INSERT INTO G VALUES (24, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 23);
INSERT INTO G VALUES (23, 7);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 21);
INSERT INTO G VALUES (21, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 24);
INSERT INTO G VALUES (24, 11);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (16, 24);
INSERT INTO G VALUES (24, 16);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,16265,true,16:09:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,15978,true,16:09:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,16691,true,16:09:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,16548,true,16:10:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 19);
INSERT INTO G VALUES (19, 6);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (13, 21);
INSERT INTO G VALUES (21, 13);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (18, 23);
INSERT INTO G VALUES (23, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 25);
INSERT INTO G VALUES (25, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,101,true,16:10:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,99,true,16:10:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,97,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,101,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (15, 25);
INSERT INTO G VALUES (25, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 23);
INSERT INTO G VALUES (23, 22);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,63,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (10, 26);
INSERT INTO G VALUES (26, 10);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 25);
INSERT INTO G VALUES (25, 18);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,63,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (10, 26);
INSERT INTO G VALUES (26, 10);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 25);
INSERT INTO G VALUES (25, 18);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,63,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (10, 26);
INSERT INTO G VALUES (26, 10);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 25);
INSERT INTO G VALUES (25, 18);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,64,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 23);
INSERT INTO G VALUES (23, 10);
INSERT INTO G VALUES (10, 26);
INSERT INTO G VALUES (26, 10);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (18, 25);
INSERT INTO G VALUES (25, 18);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (20, 22);
INSERT INTO G VALUES (22, 20);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,84,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 26);
INSERT INTO G VALUES (26, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (20, 26);
INSERT INTO G VALUES (26, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,82,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 26);
INSERT INTO G VALUES (26, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (20, 26);
INSERT INTO G VALUES (26, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,81,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 26);
INSERT INTO G VALUES (26, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (20, 26);
INSERT INTO G VALUES (26, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
27,0.1,85,true,16:10:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 22);
INSERT INTO G VALUES (22, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 20);
INSERT INTO G VALUES (20, 13);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (16, 26);
INSERT INTO G VALUES (26, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 21);
INSERT INTO G VALUES (21, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (20, 26);
INSERT INTO G VALUES (26, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,21,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (3, 26);
INSERT INTO G VALUES (26, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 27);
INSERT INTO G VALUES (27, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,21,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (3, 26);
INSERT INTO G VALUES (26, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 27);
INSERT INTO G VALUES (27, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,22,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (3, 26);
INSERT INTO G VALUES (26, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 27);
INSERT INTO G VALUES (27, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,22,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 20);
INSERT INTO G VALUES (20, 0);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (3, 26);
INSERT INTO G VALUES (26, 3);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (7, 27);
INSERT INTO G VALUES (27, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 20);
INSERT INTO G VALUES (20, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (20, 21);
INSERT INTO G VALUES (21, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,126,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 23);
INSERT INTO G VALUES (23, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 21);
INSERT INTO G VALUES (21, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 27);
INSERT INTO G VALUES (27, 13);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (23, 27);
INSERT INTO G VALUES (27, 23);
INSERT INTO G VALUES (24, 24);
INSERT INTO G VALUES (24, 26);
INSERT INTO G VALUES (26, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,125,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 23);
INSERT INTO G VALUES (23, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 21);
INSERT INTO G VALUES (21, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 27);
INSERT INTO G VALUES (27, 13);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (23, 27);
INSERT INTO G VALUES (27, 23);
INSERT INTO G VALUES (24, 24);
INSERT INTO G VALUES (24, 26);
INSERT INTO G VALUES (26, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,126,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 23);
INSERT INTO G VALUES (23, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 21);
INSERT INTO G VALUES (21, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 27);
INSERT INTO G VALUES (27, 13);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (23, 27);
INSERT INTO G VALUES (27, 23);
INSERT INTO G VALUES (24, 24);
INSERT INTO G VALUES (24, 26);
INSERT INTO G VALUES (26, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,125,true,16:10:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 23);
INSERT INTO G VALUES (23, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 21);
INSERT INTO G VALUES (21, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (10, 25);
INSERT INTO G VALUES (25, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 27);
INSERT INTO G VALUES (27, 13);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (23, 27);
INSERT INTO G VALUES (27, 23);
INSERT INTO G VALUES (24, 24);
INSERT INTO G VALUES (24, 26);
INSERT INTO G VALUES (26, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,656,true,16:10:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,663,true,16:10:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,656,true,16:10:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,633,true,16:10:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 21);
INSERT INTO G VALUES (21, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 23);
INSERT INTO G VALUES (23, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 22);
INSERT INTO G VALUES (22, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 22);
INSERT INTO G VALUES (22, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 22);
INSERT INTO G VALUES (22, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,6875,true,16:10:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 27);
INSERT INTO G VALUES (27, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,6873,true,16:10:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 27);
INSERT INTO G VALUES (27, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,6715,true,16:10:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 27);
INSERT INTO G VALUES (27, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,6916,true,16:10:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 22);
INSERT INTO G VALUES (22, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (17, 26);
INSERT INTO G VALUES (26, 17);
INSERT INTO G VALUES (19, 21);
INSERT INTO G VALUES (21, 19);
INSERT INTO G VALUES (19, 23);
INSERT INTO G VALUES (23, 19);
INSERT INTO G VALUES (20, 27);
INSERT INTO G VALUES (27, 20);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 26);
INSERT INTO G VALUES (26, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,65,true,16:10:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 26);
INSERT INTO G VALUES (26, 1);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 27);
INSERT INTO G VALUES (27, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (12, 27);
INSERT INTO G VALUES (27, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,69,true,16:10:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 26);
INSERT INTO G VALUES (26, 1);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 27);
INSERT INTO G VALUES (27, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (12, 27);
INSERT INTO G VALUES (27, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,66,true,16:10:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 26);
INSERT INTO G VALUES (26, 1);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 27);
INSERT INTO G VALUES (27, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (12, 27);
INSERT INTO G VALUES (27, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
28,0.1,65,true,16:10:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 26);
INSERT INTO G VALUES (26, 1);
INSERT INTO G VALUES (2, 22);
INSERT INTO G VALUES (22, 2);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 27);
INSERT INTO G VALUES (27, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 23);
INSERT INTO G VALUES (23, 9);
INSERT INTO G VALUES (9, 24);
INSERT INTO G VALUES (24, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 22);
INSERT INTO G VALUES (22, 12);
INSERT INTO G VALUES (12, 27);
INSERT INTO G VALUES (27, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 24);
INSERT INTO G VALUES (24, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 21);
INSERT INTO G VALUES (21, 15);
INSERT INTO G VALUES (15, 22);
INSERT INTO G VALUES (22, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 18);
INSERT INTO G VALUES (18, 16);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (20, 24);
INSERT INTO G VALUES (24, 20);
INSERT INTO G VALUES (20, 25);
INSERT INTO G VALUES (25, 20);
INSERT INTO G VALUES (21, 23);
INSERT INTO G VALUES (23, 21);
INSERT INTO G VALUES (23, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,6340,true,16:11:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 26);
INSERT INTO G VALUES (26, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (3, 27);
INSERT INTO G VALUES (27, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 26);
INSERT INTO G VALUES (26, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 26);
INSERT INTO G VALUES (26, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 28);
INSERT INTO G VALUES (28, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,6501,true,16:11:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 26);
INSERT INTO G VALUES (26, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (3, 27);
INSERT INTO G VALUES (27, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 26);
INSERT INTO G VALUES (26, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 26);
INSERT INTO G VALUES (26, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 28);
INSERT INTO G VALUES (28, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,6625,true,16:11:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 26);
INSERT INTO G VALUES (26, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (3, 27);
INSERT INTO G VALUES (27, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 26);
INSERT INTO G VALUES (26, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 26);
INSERT INTO G VALUES (26, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 28);
INSERT INTO G VALUES (28, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,6710,true,16:11:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (0, 23);
INSERT INTO G VALUES (23, 0);
INSERT INTO G VALUES (0, 26);
INSERT INTO G VALUES (26, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (2, 25);
INSERT INTO G VALUES (25, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 24);
INSERT INTO G VALUES (24, 3);
INSERT INTO G VALUES (3, 27);
INSERT INTO G VALUES (27, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 26);
INSERT INTO G VALUES (26, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 26);
INSERT INTO G VALUES (26, 6);
INSERT INTO G VALUES (7, 21);
INSERT INTO G VALUES (21, 7);
INSERT INTO G VALUES (7, 26);
INSERT INTO G VALUES (26, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 28);
INSERT INTO G VALUES (28, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (18, 21);
INSERT INTO G VALUES (21, 18);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 22);
INSERT INTO G VALUES (22, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,37,true,16:11:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 28);
INSERT INTO G VALUES (28, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);
INSERT INTO G VALUES (27, 28);
INSERT INTO G VALUES (28, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,37,true,16:11:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 28);
INSERT INTO G VALUES (28, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);
INSERT INTO G VALUES (27, 28);
INSERT INTO G VALUES (28, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,35,true,16:11:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 28);
INSERT INTO G VALUES (28, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);
INSERT INTO G VALUES (27, 28);
INSERT INTO G VALUES (28, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,35,true,16:11:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (2, 26);
INSERT INTO G VALUES (26, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 24);
INSERT INTO G VALUES (24, 5);
INSERT INTO G VALUES (6, 20);
INSERT INTO G VALUES (20, 6);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 28);
INSERT INTO G VALUES (28, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (12, 25);
INSERT INTO G VALUES (25, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (23, 24);
INSERT INTO G VALUES (24, 23);
INSERT INTO G VALUES (27, 28);
INSERT INTO G VALUES (28, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,1947,true,16:11:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (1, 28);
INSERT INTO G VALUES (28, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 27);
INSERT INTO G VALUES (27, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (23, 26);
INSERT INTO G VALUES (26, 23);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,2196,true,16:11:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (1, 28);
INSERT INTO G VALUES (28, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 27);
INSERT INTO G VALUES (27, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (23, 26);
INSERT INTO G VALUES (26, 23);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,2256,true,16:11:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (1, 28);
INSERT INTO G VALUES (28, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 27);
INSERT INTO G VALUES (27, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (23, 26);
INSERT INTO G VALUES (26, 23);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,2234,true,16:11:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (1, 28);
INSERT INTO G VALUES (28, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (7, 25);
INSERT INTO G VALUES (25, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (12, 21);
INSERT INTO G VALUES (21, 12);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 26);
INSERT INTO G VALUES (26, 15);
INSERT INTO G VALUES (16, 23);
INSERT INTO G VALUES (23, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (17, 24);
INSERT INTO G VALUES (24, 17);
INSERT INTO G VALUES (17, 25);
INSERT INTO G VALUES (25, 17);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 24);
INSERT INTO G VALUES (24, 18);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 27);
INSERT INTO G VALUES (27, 19);
INSERT INTO G VALUES (21, 22);
INSERT INTO G VALUES (22, 21);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (23, 26);
INSERT INTO G VALUES (26, 23);
INSERT INTO G VALUES (24, 25);
INSERT INTO G VALUES (25, 24);
INSERT INTO G VALUES (27, 27);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,671106,true,16:33:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 28);
INSERT INTO G VALUES (28, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 27);
INSERT INTO G VALUES (27, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (2, 27);
INSERT INTO G VALUES (27, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 24);
INSERT INTO G VALUES (24, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,682361,true,16:44:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 28);
INSERT INTO G VALUES (28, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 27);
INSERT INTO G VALUES (27, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (2, 27);
INSERT INTO G VALUES (27, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 24);
INSERT INTO G VALUES (24, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,678796,true,16:56:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 28);
INSERT INTO G VALUES (28, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 27);
INSERT INTO G VALUES (27, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (2, 27);
INSERT INTO G VALUES (27, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 24);
INSERT INTO G VALUES (24, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,692782,true,17:07:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 28);
INSERT INTO G VALUES (28, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 24);
INSERT INTO G VALUES (24, 1);
INSERT INTO G VALUES (1, 27);
INSERT INTO G VALUES (27, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (2, 24);
INSERT INTO G VALUES (24, 2);
INSERT INTO G VALUES (2, 27);
INSERT INTO G VALUES (27, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 23);
INSERT INTO G VALUES (23, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 21);
INSERT INTO G VALUES (21, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (7, 24);
INSERT INTO G VALUES (24, 7);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 19);
INSERT INTO G VALUES (19, 8);
INSERT INTO G VALUES (8, 24);
INSERT INTO G VALUES (24, 8);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (9, 26);
INSERT INTO G VALUES (26, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 18);
INSERT INTO G VALUES (18, 11);
INSERT INTO G VALUES (11, 21);
INSERT INTO G VALUES (21, 11);
INSERT INTO G VALUES (11, 23);
INSERT INTO G VALUES (23, 11);
INSERT INTO G VALUES (12, 23);
INSERT INTO G VALUES (23, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (13, 22);
INSERT INTO G VALUES (22, 13);
INSERT INTO G VALUES (13, 23);
INSERT INTO G VALUES (23, 13);
INSERT INTO G VALUES (15, 27);
INSERT INTO G VALUES (27, 15);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (19, 26);
INSERT INTO G VALUES (26, 19);
INSERT INTO G VALUES (22, 24);
INSERT INTO G VALUES (24, 22);
INSERT INTO G VALUES (24, 24);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,251472,true,17:16:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 28);
INSERT INTO G VALUES (28, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 27);
INSERT INTO G VALUES (27, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 24);
INSERT INTO G VALUES (24, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 26);
INSERT INTO G VALUES (26, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (13, 26);
INSERT INTO G VALUES (26, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (21, 26);
INSERT INTO G VALUES (26, 21);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (25, 26);
INSERT INTO G VALUES (26, 25);
INSERT INTO G VALUES (26, 26);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,251517,true,17:20:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 28);
INSERT INTO G VALUES (28, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 27);
INSERT INTO G VALUES (27, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 24);
INSERT INTO G VALUES (24, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 26);
INSERT INTO G VALUES (26, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (13, 26);
INSERT INTO G VALUES (26, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (21, 26);
INSERT INTO G VALUES (26, 21);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (25, 26);
INSERT INTO G VALUES (26, 25);
INSERT INTO G VALUES (26, 26);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,249699,true,17:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 28);
INSERT INTO G VALUES (28, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 27);
INSERT INTO G VALUES (27, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 24);
INSERT INTO G VALUES (24, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 26);
INSERT INTO G VALUES (26, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (13, 26);
INSERT INTO G VALUES (26, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (21, 26);
INSERT INTO G VALUES (26, 21);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (25, 26);
INSERT INTO G VALUES (26, 25);
INSERT INTO G VALUES (26, 26);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
29,0.1,248745,true,17:28:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 20);
INSERT INTO G VALUES (20, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 19);
INSERT INTO G VALUES (19, 3);
INSERT INTO G VALUES (3, 28);
INSERT INTO G VALUES (28, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 27);
INSERT INTO G VALUES (27, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (6, 22);
INSERT INTO G VALUES (22, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 23);
INSERT INTO G VALUES (23, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (10, 24);
INSERT INTO G VALUES (24, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 24);
INSERT INTO G VALUES (24, 12);
INSERT INTO G VALUES (12, 26);
INSERT INTO G VALUES (26, 12);
INSERT INTO G VALUES (13, 24);
INSERT INTO G VALUES (24, 13);
INSERT INTO G VALUES (13, 25);
INSERT INTO G VALUES (25, 13);
INSERT INTO G VALUES (13, 26);
INSERT INTO G VALUES (26, 13);
INSERT INTO G VALUES (15, 24);
INSERT INTO G VALUES (24, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 21);
INSERT INTO G VALUES (21, 16);
INSERT INTO G VALUES (16, 27);
INSERT INTO G VALUES (27, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (18, 22);
INSERT INTO G VALUES (22, 18);
INSERT INTO G VALUES (21, 24);
INSERT INTO G VALUES (24, 21);
INSERT INTO G VALUES (21, 26);
INSERT INTO G VALUES (26, 21);
INSERT INTO G VALUES (23, 23);
INSERT INTO G VALUES (25, 26);
INSERT INTO G VALUES (26, 25);
INSERT INTO G VALUES (26, 26);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
30,0.1,4902,true,17:28:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 28);
INSERT INTO G VALUES (28, 5);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (6, 24);
INSERT INTO G VALUES (24, 6);
INSERT INTO G VALUES (6, 29);
INSERT INTO G VALUES (29, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 27);
INSERT INTO G VALUES (27, 8);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 28);
INSERT INTO G VALUES (28, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
30,0.1,5216,true,17:28:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 28);
INSERT INTO G VALUES (28, 5);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (6, 24);
INSERT INTO G VALUES (24, 6);
INSERT INTO G VALUES (6, 29);
INSERT INTO G VALUES (29, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 27);
INSERT INTO G VALUES (27, 8);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 28);
INSERT INTO G VALUES (28, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
30,0.1,5261,true,17:29:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 28);
INSERT INTO G VALUES (28, 5);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (6, 24);
INSERT INTO G VALUES (24, 6);
INSERT INTO G VALUES (6, 29);
INSERT INTO G VALUES (29, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 27);
INSERT INTO G VALUES (27, 8);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 28);
INSERT INTO G VALUES (28, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
30,0.1,4268,true,17:29:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 21);
INSERT INTO G VALUES (21, 0);
INSERT INTO G VALUES (0, 22);
INSERT INTO G VALUES (22, 0);
INSERT INTO G VALUES (0, 25);
INSERT INTO G VALUES (25, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 25);
INSERT INTO G VALUES (25, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 25);
INSERT INTO G VALUES (25, 3);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (4, 21);
INSERT INTO G VALUES (21, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 22);
INSERT INTO G VALUES (22, 5);
INSERT INTO G VALUES (5, 28);
INSERT INTO G VALUES (28, 5);
INSERT INTO G VALUES (6, 21);
INSERT INTO G VALUES (21, 6);
INSERT INTO G VALUES (6, 24);
INSERT INTO G VALUES (24, 6);
INSERT INTO G VALUES (6, 29);
INSERT INTO G VALUES (29, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (8, 22);
INSERT INTO G VALUES (22, 8);
INSERT INTO G VALUES (8, 27);
INSERT INTO G VALUES (27, 8);
INSERT INTO G VALUES (9, 25);
INSERT INTO G VALUES (25, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 26);
INSERT INTO G VALUES (26, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (14, 22);
INSERT INTO G VALUES (22, 14);
INSERT INTO G VALUES (16, 25);
INSERT INTO G VALUES (25, 16);
INSERT INTO G VALUES (17, 22);
INSERT INTO G VALUES (22, 17);
INSERT INTO G VALUES (19, 24);
INSERT INTO G VALUES (24, 19);
INSERT INTO G VALUES (22, 28);
INSERT INTO G VALUES (28, 22);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
