seed = 1736357427986209170
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,4,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,2,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,3,true,18:30:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,3,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.2,5,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,7,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,7,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,6,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,7,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,7,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,4,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.2,8,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,5,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,5,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,5,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,6,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,9,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,14,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,15,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,14,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,16,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,8,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,8,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,8,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.2,9,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,10,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,4,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,4,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,4,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,5,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,9,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,9,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,9,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,8,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,11,true,18:30:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,11,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,9,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,8,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,8,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,8,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.2,8,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,13,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,13,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,14,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,17,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,9,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,9,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,9,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,5,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,6,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,5,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,6,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,10,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.2,12,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,25,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,23,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,24,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,24,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,14,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,14,true,18:30:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,14,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,14,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,19,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,20,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,19,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,21,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,11,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,10,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,11,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,11,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,17,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,27,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,25,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,23,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,24,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,16,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,15,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,30,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,30,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,29,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,30,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,24,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,23,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,24,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,24,true,18:30:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,21,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,21,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.2,20,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,29,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,30,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,29,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,30,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,8,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,10,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,9,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,8,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,21,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,22,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,22,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,20,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,18,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,18,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,19,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.2,20,true,18:30:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,165,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,166,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,164,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,163,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,33,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,33,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,34,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,33,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,17,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,19,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,17,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,17,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,17,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.2,18,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,28,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,29,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,28,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,28,true,18:30:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,854,true,18:30:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,856,true,18:30:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,826,true,18:30:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,842,true,18:30:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,66,true,18:30:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,65,true,18:30:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,65,true,18:30:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,66,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,32,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,33,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,33,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,32,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,234,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,234,true,18:30:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,234,true,18:30:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.2,235,true,18:30:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,1192,true,18:30:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,1289,true,18:30:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,1322,true,18:30:46
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,1299,true,18:30:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,2445,true,18:30:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,2536,true,18:30:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,2493,true,18:30:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,2417,true,18:31:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,551,true,18:31:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,546,true,18:31:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,546,true,18:31:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,552,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,37,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,38,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,37,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,36,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,19,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,19,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,20,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.2,21,true,18:31:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,568,true,18:31:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,536,true,18:31:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,532,true,18:31:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,528,true,18:31:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,60,true,18:31:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,59,true,18:31:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,59,true,18:31:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,59,true,18:31:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,682,true,18:31:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,676,true,18:31:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,678,true,18:31:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,685,true,18:31:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,618,true,18:31:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,605,true,18:31:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,607,true,18:31:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,615,true,18:31:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,286,true,18:31:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,279,true,18:31:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,281,true,18:31:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.2,287,true,18:31:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,4900,true,18:31:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,4917,true,18:31:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,5134,true,18:31:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,4675,true,18:31:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,49,true,18:31:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,47,true,18:31:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,46,true,18:31:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,49,true,18:31:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3299,true,18:31:46
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3510,true,18:31:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3428,true,18:31:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3573,true,18:31:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,9114,true,18:32:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,8871,true,18:32:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,9688,true,18:32:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,9120,true,18:32:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3060,true,18:32:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3124,true,18:32:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3292,true,18:32:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.2,3333,true,18:32:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,151,true,18:32:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,148,true,18:33:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,166,true,18:33:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,154,true,18:33:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,273,true,18:33:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,269,true,18:33:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,268,true,18:33:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,293,true,18:33:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,12436,true,18:33:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,13288,true,18:33:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,13198,true,18:33:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,12611,true,18:34:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 17);
INSERT INTO G VALUES (17, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,1327,true,18:34:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,1311,true,18:34:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,1285,true,18:34:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,1374,true,18:34:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (16, 16);
INSERT INTO G VALUES (17, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,3563,true,18:34:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,3442,true,18:34:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,3635,true,18:34:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
19,0.2,3836,true,18:34:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 18);
INSERT INTO G VALUES (18, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 17);
INSERT INTO G VALUES (17, 12);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (13, 18);
INSERT INTO G VALUES (18, 13);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,260028,true,18:43:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,267024,true,18:47:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,270323,true,18:51:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,264885,true,18:56:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 17);
INSERT INTO G VALUES (17, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,433,true,18:56:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,433,true,18:56:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,442,true,18:56:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,455,true,18:56:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 18);
INSERT INTO G VALUES (18, 2);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,2000,true,18:56:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,2129,true,18:56:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,2088,true,18:56:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,2100,true,18:56:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 18);
INSERT INTO G VALUES (18, 3);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 19);
INSERT INTO G VALUES (19, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,27067,true,18:57:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,24541,true,18:57:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,26879,true,18:58:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,25752,true,18:58:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (7, 19);
INSERT INTO G VALUES (19, 7);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);
INSERT INTO G VALUES (15, 19);
INSERT INTO G VALUES (19, 15);
INSERT INTO G VALUES (18, 18);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,22515,true,18:59:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,22885,true,18:59:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,22175,true,19:00:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
20,0.2,25454,true,19:00:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (7, 18);
INSERT INTO G VALUES (18, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 19);
INSERT INTO G VALUES (19, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 19);
INSERT INTO G VALUES (19, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,117319,true,19:04:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,117409,true,19:06:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,120963,true,19:08:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,116405,true,19:10:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 19);
INSERT INTO G VALUES (19, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 19);
INSERT INTO G VALUES (19, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 18);
INSERT INTO G VALUES (18, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,9952,true,19:10:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,8701,true,19:10:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,8718,true,19:11:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,9523,true,19:11:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (6, 16);
INSERT INTO G VALUES (16, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 20);
INSERT INTO G VALUES (20, 14);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,51377,true,19:12:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,49330,true,19:13:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,52507,true,19:14:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,51019,true,19:15:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 18);
INSERT INTO G VALUES (18, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (4, 20);
INSERT INTO G VALUES (20, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 19);
INSERT INTO G VALUES (19, 5);
INSERT INTO G VALUES (5, 20);
INSERT INTO G VALUES (20, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 20);
INSERT INTO G VALUES (20, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (8, 20);
INSERT INTO G VALUES (20, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 19);
INSERT INTO G VALUES (19, 13);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (17, 17);
INSERT INTO G VALUES (17, 20);
INSERT INTO G VALUES (20, 17);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,86564,true,19:18:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,89385,true,19:19:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,89635,true,19:21:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,87739,true,19:22:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 16);
INSERT INTO G VALUES (16, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (1, 17);
INSERT INTO G VALUES (17, 1);
INSERT INTO G VALUES (1, 18);
INSERT INTO G VALUES (18, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 20);
INSERT INTO G VALUES (20, 2);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 17);
INSERT INTO G VALUES (17, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (8, 18);
INSERT INTO G VALUES (18, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 18);
INSERT INTO G VALUES (18, 9);
INSERT INTO G VALUES (10, 20);
INSERT INTO G VALUES (20, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 19);
INSERT INTO G VALUES (19, 12);
INSERT INTO G VALUES (12, 20);
INSERT INTO G VALUES (20, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (19, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,25548,true,19:23:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,23403,true,19:24:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,22308,true,19:24:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
21,0.2,24764,true,19:24:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 19);
INSERT INTO G VALUES (19, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 16);
INSERT INTO G VALUES (16, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 18);
INSERT INTO G VALUES (18, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (9, 17);
INSERT INTO G VALUES (17, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 18);
INSERT INTO G VALUES (18, 14);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (15, 20);
INSERT INTO G VALUES (20, 15);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (16, 20);
INSERT INTO G VALUES (20, 16);
INSERT INTO G VALUES (17, 18);
INSERT INTO G VALUES (18, 17);
INSERT INTO G VALUES (19, 19);
INSERT INTO G VALUES (19, 20);
INSERT INTO G VALUES (20, 19);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.2,3572,true,19:24:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 21);
INSERT INTO G VALUES (21, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.2,3606,true,19:25:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 21);
INSERT INTO G VALUES (21, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.2,3928,true,19:25:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 21);
INSERT INTO G VALUES (21, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
22,0.2,3890,true,19:25:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 19);
INSERT INTO G VALUES (19, 1);
INSERT INTO G VALUES (1, 21);
INSERT INTO G VALUES (21, 1);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 17);
INSERT INTO G VALUES (17, 2);
INSERT INTO G VALUES (3, 20);
INSERT INTO G VALUES (20, 3);
INSERT INTO G VALUES (3, 21);
INSERT INTO G VALUES (21, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (4, 18);
INSERT INTO G VALUES (18, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (10, 21);
INSERT INTO G VALUES (21, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (11, 19);
INSERT INTO G VALUES (19, 11);
INSERT INTO G VALUES (12, 18);
INSERT INTO G VALUES (18, 12);
INSERT INTO G VALUES (15, 18);
INSERT INTO G VALUES (18, 15);
INSERT INTO G VALUES (16, 17);
INSERT INTO G VALUES (17, 16);
INSERT INTO G VALUES (16, 19);
INSERT INTO G VALUES (19, 16);
INSERT INTO G VALUES (18, 19);
INSERT INTO G VALUES (19, 18);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
