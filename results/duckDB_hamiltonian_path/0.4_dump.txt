seed = 1736425178865755927
2,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,3,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,2,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,4,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.4,5,true,13:19:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,4,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,4,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,4,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,4,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,7,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,7,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,6,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,7,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,5,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,6,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,6,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,5,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,8,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,9,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,10,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,12,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,11,true,13:19:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,11,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.4,11,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,13,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,13,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,11,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,11,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,11,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,12,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,16,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,16,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,15,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.4,16,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,8,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,16,true,13:19:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,17,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,16,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,17,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,19,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,19,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,19,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,19,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,15,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,16,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,15,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,15,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,14,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,15,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,16,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.4,15,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,20,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,19,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,20,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,20,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,11,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,12,true,13:19:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,12,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,11,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,21,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,21,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,21,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,23,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,31,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,32,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,31,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,31,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,46,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,48,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,46,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.4,47,true,13:19:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,26,true,13:19:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,32,true,13:19:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,26,true,13:19:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,33,true,13:19:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,630,true,13:19:46
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,591,true,13:19:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,619,true,13:19:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,623,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,38,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,39,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,38,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,38,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,42,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,42,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,42,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,42,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,33,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,33,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,33,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.4,33,true,13:19:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,207,true,13:19:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,203,true,13:19:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,202,true,13:19:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,203,true,13:19:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,721,true,13:19:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,692,true,13:19:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,721,true,13:19:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,723,true,13:19:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,914,true,13:19:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,998,true,13:19:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,922,true,13:19:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,925,true,13:19:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,978,true,13:20:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,940,true,13:20:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,920,true,13:20:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,1037,true,13:20:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,4432,true,13:20:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,4474,true,13:20:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,4364,true,13:20:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.4,4373,true,13:20:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,209,true,13:20:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,208,true,13:20:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,216,true,13:20:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,211,true,13:20:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,137,true,13:20:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,137,true,13:20:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,135,true,13:20:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,136,true,13:20:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,950,true,13:20:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,947,true,13:20:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,899,true,13:20:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,950,true,13:20:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,41,true,13:20:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,40,true,13:20:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,41,true,13:20:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,39,true,13:20:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,1156,true,13:20:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,1203,true,13:20:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,1203,true,13:20:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.4,1223,true,13:20:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,5796,true,13:20:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,5721,true,13:20:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,5832,true,13:21:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,5736,true,13:21:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,21432,true,13:21:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,21558,true,13:22:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,21518,true,13:22:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,21460,true,13:22:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,16678,true,13:23:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,16945,true,13:23:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,16117,true,13:24:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,16527,true,13:24:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,1380,true,13:24:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,1371,true,13:24:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,1500,true,13:24:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,1591,true,13:24:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,14163,true,13:24:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,14332,true,13:25:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,14443,true,13:25:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.4,13640,true,13:25:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,101787,true,13:28:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,103654,true,13:30:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,102378,true,13:32:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,102347,true,13:34:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,7367,true,13:34:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,6282,true,13:34:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,6752,true,13:34:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,6556,true,13:34:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,9432,true,13:34:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,9567,true,13:35:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,9047,true,13:35:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,9588,true,13:35:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,47242,true,13:37:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,46726,true,13:37:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,48025,true,13:38:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,48142,true,13:39:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,62092,true,13:41:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,58985,true,13:42:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,59885,true,13:43:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.4,58476,true,13:44:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.4,342473,true,13:55:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.4,338566,true,14:01:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.4,340251,true,14:07:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.4,353283,true,14:13:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
