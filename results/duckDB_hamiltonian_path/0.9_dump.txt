seed = 1736588825767125015
2,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,3,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.9,4,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,6,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,6,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.9,5,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,8,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.9,7,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,13,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,11,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.9,12,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,23,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,24,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,28,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,27,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,28,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,27,true,10:47:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,20,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,19,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,20,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,20,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,18,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,19,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,19,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.9,18,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,29,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,29,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,29,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,37,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,37,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,37,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,37,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,46,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,31,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,39,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,31,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,31,true,10:47:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,39,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,39,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,39,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,39,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,77,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,76,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,77,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.9,76,true,10:47:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,516,true,10:47:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,562,true,10:47:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,553,true,10:47:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,555,true,10:47:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,161,true,10:47:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,160,true,10:47:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,159,true,10:47:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,158,true,10:47:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,340,true,10:47:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,338,true,10:47:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,340,true,10:47:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,335,true,10:47:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,403,true,10:47:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,397,true,10:47:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,431,true,10:47:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,401,true,10:47:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,347,true,10:47:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,336,true,10:47:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,335,true,10:47:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.9,337,true,10:47:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,2179,true,10:47:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,2033,true,10:47:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,2003,true,10:47:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,2227,true,10:47:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3953,true,10:47:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3914,true,10:47:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4099,true,10:47:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3937,true,10:47:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4555,true,10:48:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4566,true,10:48:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4541,true,10:48:09
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4683,true,10:48:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,1988,true,10:48:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,2132,true,10:48:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,1993,true,10:48:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,1975,true,10:48:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3828,true,10:48:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3833,true,10:48:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,3806,true,10:48:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.9,4060,true,10:48:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,37592,true,10:49:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,38115,true,10:50:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,37982,true,10:51:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,37897,true,10:51:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,28899,true,10:52:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,28399,true,10:53:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,28014,true,10:53:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,28076,true,10:54:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,38475,true,10:55:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,38757,true,10:56:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,39137,true,10:56:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,38500,true,10:57:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,47047,true,10:59:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,46115,true,10:59:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,47078,true,11:00:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,48048,true,11:01:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,29874,true,11:02:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,30289,true,11:02:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,30254,true,11:03:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.9,29822,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
