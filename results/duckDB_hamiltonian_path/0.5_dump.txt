seed = 1736432667332355531
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,5,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,3,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,5,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,5,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,5,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,5,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.5,4,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,6,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,9,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,9,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,9,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,8,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,11,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,11,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,11,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,11,true,15:24:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,13,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.5,7,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,18,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,18,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,15,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,14,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,14,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,14,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,15,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,11,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,12,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,22,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,22,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,22,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,22,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,17,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,16,true,15:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,37,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,37,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,37,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,36,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,14,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,15,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,14,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,14,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,16,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,17,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,17,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.5,17,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,48,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,49,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,48,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,48,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,85,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,83,true,15:24:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,85,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,85,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,139,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,138,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,138,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,134,true,15:24:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,91,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,92,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,92,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,89,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,75,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,74,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,74,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.5,74,true,15:24:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,113,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,110,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,111,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,109,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,179,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,178,true,15:24:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,174,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,176,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,79,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,77,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,79,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,79,true,15:24:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,501,true,15:24:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,494,true,15:24:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,500,true,15:24:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,506,true,15:24:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,79,true,15:24:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,78,true,15:24:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,79,true,15:24:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.5,78,true,15:24:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,9694,true,15:24:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,9710,true,15:25:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,9784,true,15:25:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,9847,true,15:25:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,3298,true,15:25:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,3376,true,15:25:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,3513,true,15:25:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,3673,true,15:25:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1364,true,15:25:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1304,true,15:25:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1386,true,15:25:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1336,true,15:25:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,2116,true,15:25:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,2006,true,15:25:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,2054,true,15:26:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,2000,true,15:26:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1788,true,15:26:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1646,true,15:26:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1714,true,15:26:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.5,1661,true,15:26:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,15407,true,15:26:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,15027,true,15:26:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,14970,true,15:27:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,15342,true,15:27:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,24993,true,15:28:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,24568,true,15:28:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,24931,true,15:29:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,24881,true,15:29:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,7560,true,15:29:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,7092,true,15:29:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,7790,true,15:30:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,7885,true,15:30:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,17697,true,15:30:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,18038,true,15:31:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,19066,true,15:31:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,18056,true,15:31:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,3846,true,15:31:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,3569,true,15:31:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,3663,true,15:31:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.5,3714,true,15:31:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,42177,true,15:33:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,40001,true,15:34:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,41353,true,15:34:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,40538,true,15:35:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,37549,true,15:36:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,36659,true,15:37:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,37488,true,15:37:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.5,38450,true,15:38:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
