seed = 1736596956523717974
2,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,1,4,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,5,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,1,6,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,9,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,7,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,8,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,1,7,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,14,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,13,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,1,12,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,30,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,30,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,30,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,30,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,30,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,1,29,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,81,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,81,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,79,true,13:02:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,83,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,79,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,79,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,79,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,81,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,81,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,82,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,79,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,1,80,true,13:02:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,780,true,13:02:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,880,true,13:02:46
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,750,true,13:02:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,777,true,13:02:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,827,true,13:02:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,744,true,13:02:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,747,true,13:02:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,853,true,13:02:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,838,true,13:02:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,819,true,13:02:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,761,true,13:02:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,779,true,13:02:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,766,true,13:02:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,834,true,13:02:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,816,true,13:02:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,862,true,13:03:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,827,true,13:03:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,805,true,13:03:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,749,true,13:03:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,1,767,true,13:03:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6817,true,13:03:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6873,true,13:03:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6854,true,13:03:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6838,true,13:03:38
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6978,true,13:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7142,true,13:03:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7075,true,13:04:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7215,true,13:04:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7018,true,13:04:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7270,true,13:04:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,6947,true,13:04:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7033,true,13:04:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7234,true,13:05:03
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7242,true,13:05:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7439,true,13:05:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7481,true,13:05:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7107,true,13:05:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7448,true,13:05:47
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7082,true,13:05:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,1,7092,true,13:06:01
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82066,true,13:08:46
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82196,true,13:10:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,81822,true,13:11:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83221,true,13:12:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82937,true,13:15:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83176,true,13:17:02
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83241,true,13:18:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83034,true,13:19:48
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82698,true,13:22:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82301,true,13:23:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82349,true,13:25:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,81980,true,13:26:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82409,true,13:29:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83397,true,13:30:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82677,true,13:32:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82875,true,13:33:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83115,true,13:36:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82772,true,13:37:44
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,83082,true,13:39:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,1,82545,true,13:40:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
