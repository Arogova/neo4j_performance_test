seed = 1736417029697739243
2,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
2,0.3,2,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,3,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,5,true,11:03:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
3,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (3, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,7,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,2,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,2,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,2,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,2,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 1);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
4,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
5,0.3,3,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (4, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,8,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,13,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,13,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,13,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,12,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,5,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,7,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
6,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,12,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,12,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,12,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,12,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (6, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,4,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,10,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,9,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,7,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
7,0.3,6,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,15,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,14,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,14,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,15,true,11:03:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,11,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,9,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,9,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,10,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,18,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,21,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,12,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,12,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
8,0.3,13,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,16,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,8,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,8,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,8,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,8,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,12,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,11,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,12,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,12,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
9,0.3,17,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,22,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,23,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,22,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,23,true,11:03:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,22,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,21,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,23,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,22,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,17,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,18,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,16,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,17,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,33,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,44,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,32,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,33,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,91,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,90,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,93,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
10,0.3,91,true,11:03:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,82,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,81,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,82,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,82,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,35,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,35,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,36,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,36,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,21,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,21,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,21,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,24,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,23,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,24,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,24,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,24,true,11:03:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,32,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,35,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,32,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
11,0.3,31,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,33,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,33,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,30,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,31,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,60,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,49,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,49,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,48,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,37,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,36,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,36,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,36,true,11:03:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,180,true,11:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,180,true,11:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,178,true,11:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,176,true,11:03:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,559,true,11:03:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,565,true,11:03:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,564,true,11:03:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
12,0.3,560,true,11:03:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,2556,true,11:04:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,2785,true,11:04:07
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,2794,true,11:04:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,2529,true,11:04:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,976,true,11:04:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,988,true,11:04:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,990,true,11:04:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,927,true,11:04:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,36,true,11:04:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,36,true,11:04:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,36,true,11:04:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,36,true,11:04:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,202,true,11:04:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,208,true,11:04:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,206,true,11:04:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,207,true,11:04:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (10, 10);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,296,true,11:04:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,300,true,11:04:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,297,true,11:04:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
13,0.3,296,true,11:04:20
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1893,true,11:04:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1883,true,11:04:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1970,true,11:04:28
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1944,true,11:04:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1663,true,11:04:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1792,true,11:04:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1738,true,11:04:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1776,true,11:04:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,60,true,11:04:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,62,true,11:04:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,61,true,11:04:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,60,true,11:04:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (12, 12);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,8634,true,11:04:56
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,8808,true,11:05:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,8958,true,11:05:14
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,9120,true,11:05:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 11);
INSERT INTO G VALUES (11, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,1986,true,11:05:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,2000,true,11:05:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,2056,true,11:05:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
14,0.3,2067,true,11:05:33
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,16173,true,11:06:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,16288,true,11:06:21
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,15565,true,11:06:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,15982,true,11:06:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,16007,true,11:07:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,15010,true,11:07:39
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,15288,true,11:07:55
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,15842,true,11:08:10
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,287,true,11:08:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,285,true,11:08:11
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,288,true,11:08:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,285,true,11:08:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,24217,true,11:09:00
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,24018,true,11:09:24
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,24639,true,11:09:49
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,24177,true,11:10:13
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,4319,true,11:10:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,4476,true,11:10:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,4716,true,11:10:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
15,0.3,4638,true,11:10:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,10640,true,11:10:57
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,10911,true,11:11:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,10839,true,11:11:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,10801,true,11:11:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 13);
INSERT INTO G VALUES (13, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,18303,true,11:12:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,16792,true,11:12:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,18467,true,11:12:41
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,17248,true,11:12:58
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,13618,true,11:13:25
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,12412,true,11:13:37
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,13731,true,11:13:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,12772,true,11:14:04
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 10);
INSERT INTO G VALUES (10, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 13);
INSERT INTO G VALUES (13, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,126881,true,11:18:15
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,124316,true,11:20:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,123946,true,11:22:23
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,126531,true,11:24:30
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 8);
INSERT INTO G VALUES (8, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 9);
INSERT INTO G VALUES (9, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,49778,true,11:26:06
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,47450,true,11:26:53
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,49223,true,11:27:43
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
16,0.3,48020,true,11:28:31
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 13);
INSERT INTO G VALUES (13, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 12);
INSERT INTO G VALUES (12, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 12);
INSERT INTO G VALUES (12, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (5, 5);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,9169,true,11:28:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,9236,true,11:28:59
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,9117,true,11:29:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,9130,true,11:29:18
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 14);
INSERT INTO G VALUES (14, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 7);
INSERT INTO G VALUES (7, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 13);
INSERT INTO G VALUES (13, 7);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (14, 15);
INSERT INTO G VALUES (15, 14);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,343085,true,11:41:05
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,346101,true,11:46:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,351670,true,11:52:42
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,352352,true,11:58:35
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 5);
INSERT INTO G VALUES (5, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 10);
INSERT INTO G VALUES (10, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 15);
INSERT INTO G VALUES (15, 0);
INSERT INTO G VALUES (1, 3);
INSERT INTO G VALUES (3, 1);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 7);
INSERT INTO G VALUES (7, 4);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 15);
INSERT INTO G VALUES (15, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 10);
INSERT INTO G VALUES (10, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (11, 16);
INSERT INTO G VALUES (16, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,174037,true,12:04:27
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,171868,true,12:07:19
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,172422,true,12:10:12
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,176410,true,12:13:08
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 9);
INSERT INTO G VALUES (9, 1);
INSERT INTO G VALUES (1, 10);
INSERT INTO G VALUES (10, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 14);
INSERT INTO G VALUES (14, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 5);
INSERT INTO G VALUES (5, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 10);
INSERT INTO G VALUES (10, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 11);
INSERT INTO G VALUES (11, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (7, 8);
INSERT INTO G VALUES (8, 7);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 14);
INSERT INTO G VALUES (14, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 13);
INSERT INTO G VALUES (13, 8);
INSERT INTO G VALUES (9, 11);
INSERT INTO G VALUES (11, 9);
INSERT INTO G VALUES (9, 15);
INSERT INTO G VALUES (15, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 13);
INSERT INTO G VALUES (13, 10);
INSERT INTO G VALUES (10, 16);
INSERT INTO G VALUES (16, 10);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 16);
INSERT INTO G VALUES (16, 14);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,63980,true,12:15:17
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,64976,true,12:16:22
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,66709,true,12:17:29
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,67281,true,12:18:36
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 12);
INSERT INTO G VALUES (12, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 4);
INSERT INTO G VALUES (4, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 10);
INSERT INTO G VALUES (10, 2);
INSERT INTO G VALUES (2, 11);
INSERT INTO G VALUES (11, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 13);
INSERT INTO G VALUES (13, 3);
INSERT INTO G VALUES (4, 5);
INSERT INTO G VALUES (5, 4);
INSERT INTO G VALUES (4, 6);
INSERT INTO G VALUES (6, 4);
INSERT INTO G VALUES (4, 9);
INSERT INTO G VALUES (9, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 15);
INSERT INTO G VALUES (15, 4);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 6);
INSERT INTO G VALUES (6, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 9);
INSERT INTO G VALUES (9, 6);
INSERT INTO G VALUES (6, 12);
INSERT INTO G VALUES (12, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 16);
INSERT INTO G VALUES (16, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 11);
INSERT INTO G VALUES (11, 10);
INSERT INTO G VALUES (10, 12);
INSERT INTO G VALUES (12, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 14);
INSERT INTO G VALUES (14, 11);
INSERT INTO G VALUES (12, 14);
INSERT INTO G VALUES (14, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 16);
INSERT INTO G VALUES (16, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,59131,true,12:20:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,57375,true,12:21:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,60694,true,12:22:32
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
17,0.3,61827,true,12:23:34
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 3);
INSERT INTO G VALUES (3, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 6);
INSERT INTO G VALUES (6, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 5);
INSERT INTO G VALUES (5, 2);
INSERT INTO G VALUES (2, 8);
INSERT INTO G VALUES (8, 2);
INSERT INTO G VALUES (2, 12);
INSERT INTO G VALUES (12, 2);
INSERT INTO G VALUES (2, 13);
INSERT INTO G VALUES (13, 2);
INSERT INTO G VALUES (3, 3);
INSERT INTO G VALUES (3, 6);
INSERT INTO G VALUES (6, 3);
INSERT INTO G VALUES (3, 10);
INSERT INTO G VALUES (10, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 15);
INSERT INTO G VALUES (15, 3);
INSERT INTO G VALUES (4, 16);
INSERT INTO G VALUES (16, 4);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 12);
INSERT INTO G VALUES (12, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (6, 8);
INSERT INTO G VALUES (8, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 14);
INSERT INTO G VALUES (14, 6);
INSERT INTO G VALUES (6, 15);
INSERT INTO G VALUES (15, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (7, 12);
INSERT INTO G VALUES (12, 7);
INSERT INTO G VALUES (7, 16);
INSERT INTO G VALUES (16, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 16);
INSERT INTO G VALUES (16, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (9, 14);
INSERT INTO G VALUES (14, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 14);
INSERT INTO G VALUES (14, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (12, 13);
INSERT INTO G VALUES (13, 12);
INSERT INTO G VALUES (12, 16);
INSERT INTO G VALUES (16, 12);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (15, 15);
INSERT INTO G VALUES (15, 16);
INSERT INTO G VALUES (16, 15);
INSERT INTO G VALUES (16, 16);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,243939,true,12:31:45
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,246902,true,12:35:51
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,242588,true,12:39:54
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,237525,true,12:43:52
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 1);
INSERT INTO G VALUES (1, 0);
INSERT INTO G VALUES (0, 2);
INSERT INTO G VALUES (2, 0);
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 9);
INSERT INTO G VALUES (9, 0);
INSERT INTO G VALUES (0, 13);
INSERT INTO G VALUES (13, 0);
INSERT INTO G VALUES (0, 14);
INSERT INTO G VALUES (14, 0);
INSERT INTO G VALUES (1, 2);
INSERT INTO G VALUES (2, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 12);
INSERT INTO G VALUES (12, 1);
INSERT INTO G VALUES (1, 16);
INSERT INTO G VALUES (16, 1);
INSERT INTO G VALUES (2, 4);
INSERT INTO G VALUES (4, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 9);
INSERT INTO G VALUES (9, 3);
INSERT INTO G VALUES (3, 11);
INSERT INTO G VALUES (11, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (3, 17);
INSERT INTO G VALUES (17, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 14);
INSERT INTO G VALUES (14, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 9);
INSERT INTO G VALUES (9, 5);
INSERT INTO G VALUES (5, 13);
INSERT INTO G VALUES (13, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 15);
INSERT INTO G VALUES (15, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 13);
INSERT INTO G VALUES (13, 6);
INSERT INTO G VALUES (7, 9);
INSERT INTO G VALUES (9, 7);
INSERT INTO G VALUES (7, 11);
INSERT INTO G VALUES (11, 7);
INSERT INTO G VALUES (8, 11);
INSERT INTO G VALUES (11, 8);
INSERT INTO G VALUES (8, 14);
INSERT INTO G VALUES (14, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (8, 17);
INSERT INTO G VALUES (17, 8);
INSERT INTO G VALUES (9, 9);
INSERT INTO G VALUES (10, 10);
INSERT INTO G VALUES (10, 15);
INSERT INTO G VALUES (15, 10);
INSERT INTO G VALUES (11, 12);
INSERT INTO G VALUES (12, 11);
INSERT INTO G VALUES (11, 13);
INSERT INTO G VALUES (13, 11);
INSERT INTO G VALUES (11, 15);
INSERT INTO G VALUES (15, 11);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,193419,true,12:50:16
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,190045,true,12:53:26
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,194146,true,12:56:40
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
18,0.3,190234,true,12:59:50
DROP TABLE IF EXISTS G;
CREATE TABLE G(src int, trg int, primary key(src,trg));
INSERT INTO G VALUES (0, 4);
INSERT INTO G VALUES (4, 0);
INSERT INTO G VALUES (0, 7);
INSERT INTO G VALUES (7, 0);
INSERT INTO G VALUES (0, 8);
INSERT INTO G VALUES (8, 0);
INSERT INTO G VALUES (0, 11);
INSERT INTO G VALUES (11, 0);
INSERT INTO G VALUES (0, 17);
INSERT INTO G VALUES (17, 0);
INSERT INTO G VALUES (1, 1);
INSERT INTO G VALUES (1, 5);
INSERT INTO G VALUES (5, 1);
INSERT INTO G VALUES (1, 6);
INSERT INTO G VALUES (6, 1);
INSERT INTO G VALUES (1, 7);
INSERT INTO G VALUES (7, 1);
INSERT INTO G VALUES (1, 8);
INSERT INTO G VALUES (8, 1);
INSERT INTO G VALUES (1, 15);
INSERT INTO G VALUES (15, 1);
INSERT INTO G VALUES (2, 2);
INSERT INTO G VALUES (2, 3);
INSERT INTO G VALUES (3, 2);
INSERT INTO G VALUES (2, 6);
INSERT INTO G VALUES (6, 2);
INSERT INTO G VALUES (2, 9);
INSERT INTO G VALUES (9, 2);
INSERT INTO G VALUES (2, 15);
INSERT INTO G VALUES (15, 2);
INSERT INTO G VALUES (2, 16);
INSERT INTO G VALUES (16, 2);
INSERT INTO G VALUES (3, 4);
INSERT INTO G VALUES (4, 3);
INSERT INTO G VALUES (3, 7);
INSERT INTO G VALUES (7, 3);
INSERT INTO G VALUES (3, 14);
INSERT INTO G VALUES (14, 3);
INSERT INTO G VALUES (4, 8);
INSERT INTO G VALUES (8, 4);
INSERT INTO G VALUES (4, 11);
INSERT INTO G VALUES (11, 4);
INSERT INTO G VALUES (4, 17);
INSERT INTO G VALUES (17, 4);
INSERT INTO G VALUES (5, 7);
INSERT INTO G VALUES (7, 5);
INSERT INTO G VALUES (5, 8);
INSERT INTO G VALUES (8, 5);
INSERT INTO G VALUES (5, 10);
INSERT INTO G VALUES (10, 5);
INSERT INTO G VALUES (5, 14);
INSERT INTO G VALUES (14, 5);
INSERT INTO G VALUES (5, 16);
INSERT INTO G VALUES (16, 5);
INSERT INTO G VALUES (6, 6);
INSERT INTO G VALUES (6, 7);
INSERT INTO G VALUES (7, 6);
INSERT INTO G VALUES (6, 10);
INSERT INTO G VALUES (10, 6);
INSERT INTO G VALUES (6, 11);
INSERT INTO G VALUES (11, 6);
INSERT INTO G VALUES (6, 17);
INSERT INTO G VALUES (17, 6);
INSERT INTO G VALUES (7, 7);
INSERT INTO G VALUES (8, 8);
INSERT INTO G VALUES (8, 10);
INSERT INTO G VALUES (10, 8);
INSERT INTO G VALUES (8, 12);
INSERT INTO G VALUES (12, 8);
INSERT INTO G VALUES (8, 15);
INSERT INTO G VALUES (15, 8);
INSERT INTO G VALUES (9, 12);
INSERT INTO G VALUES (12, 9);
INSERT INTO G VALUES (10, 17);
INSERT INTO G VALUES (17, 10);
INSERT INTO G VALUES (11, 17);
INSERT INTO G VALUES (17, 11);
INSERT INTO G VALUES (12, 15);
INSERT INTO G VALUES (15, 12);
INSERT INTO G VALUES (13, 13);
INSERT INTO G VALUES (13, 14);
INSERT INTO G VALUES (14, 13);
INSERT INTO G VALUES (13, 15);
INSERT INTO G VALUES (15, 13);
INSERT INTO G VALUES (13, 17);
INSERT INTO G VALUES (17, 13);
INSERT INTO G VALUES (14, 14);
INSERT INTO G VALUES (15, 17);
INSERT INTO G VALUES (17, 15);


explain analyze with recursive paths(startP, endP, path)                   
	AS (SELECT src as startP, trg as endP, ARRAY[src,trg] as path
		FROM G
		UNION
		SELECT startP, trg, array_append(path,trg)	
		FROM G, paths
		WHERE src=endP AND trg <> ALL(path))
	SELECT * FROM paths WHERE ARRAY_LENGTH(path,1) = (SELECT COUNT(distinct src) FROM G)
	LIMIT 1;
------
