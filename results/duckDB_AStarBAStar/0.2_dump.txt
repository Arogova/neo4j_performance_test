seed = 1736781314247386321
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,12,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,10,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,12,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,10,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,7,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,7,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,7,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.2,7,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,9,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,9,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,9,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,9,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,5,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,3,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,6,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,4,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,10,true,16:15:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,14,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,14,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,15,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.2,15,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,11,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,11,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,11,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,9,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,8,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,5,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,4,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,5,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.2,5,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,14,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,11,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,12,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,13,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,10,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,9,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,9,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,9,true,16:15:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,17,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,16,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,17,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,18,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,79,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,80,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,88,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,78,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,22,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,21,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,22,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.2,21,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,19,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,19,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,20,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,18,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,13,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,14,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,13,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,13,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,15,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,15,true,16:15:19
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,8,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,9,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,9,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,8,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,7,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,7,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,7,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.2,7,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,23,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,23,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,23,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,24,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,15,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,10,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,10,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,10,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,11,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,10,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,10,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,11,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,11,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,31,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,34,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,32,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.2,30,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,22,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,24,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,22,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,21,true,16:15:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,29,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,29,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,28,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,30,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,20,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,20,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,20,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,20,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,37,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,33,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,34,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,36,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,19,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,19,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,18,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.2,20,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,11,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,11,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,11,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,11,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,21,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,21,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,22,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,21,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,35,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,37,true,16:15:21
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,36,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,36,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,38,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,38,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,38,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,38,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,22,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,22,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,22,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.2,22,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,39,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,40,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,38,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,39,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,40,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,39,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,40,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,39,true,16:15:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,208,true,16:15:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,206,true,16:15:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,207,true,16:15:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,211,true,16:15:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,16,true,16:15:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,16,true,16:15:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,15,true,16:15:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,16,true,16:15:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,2656,true,16:15:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,2692,true,16:15:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,2662,true,16:15:34
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.2,2637,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,57,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,57,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,63,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,58,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,19,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,20,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,19,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,19,true,16:15:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,117,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,116,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,124,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,116,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,52,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,53,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,52,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,52,true,16:15:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,22,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,20,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,19,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.2,21,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,210,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,213,true,16:15:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,212,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,212,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,84,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,83,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,85,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.2,86,true,16:15:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
