seed = 1737456840275773969
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
2,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
3,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,10,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,10,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
4,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,6,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,7,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
5,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,4,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,5,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,7,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,9,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,8,true,11:54:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,4,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
6,0.1,4,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,10,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
7,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
8,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,6,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
9,0.1,8,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,10,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,9,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,7,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
10,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,4,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO StartLabel VALUES (4)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
11,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,4,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,5,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,7,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
12,0.1,9,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,15,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,10,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,15,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,15,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,14,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,11,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
13,0.1,12,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,10,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,10,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,10,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,10,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,9,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,9,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,9,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,9,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,8,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,18,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,19,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,19,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,18,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
14,0.1,7,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,14,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,5,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,5,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,5,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,5,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,16,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,16,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,15,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,12,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,13,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,12,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,12,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,11,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,11,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,12,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
15,0.1,11,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,true,11:54:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,3106,true,11:54:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,3153,true,11:54:17
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,3127,true,11:54:20
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,3104,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,21,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,22,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,21,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,20,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,14,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,13,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,8,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,7,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,8,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
16,0.1,8,true,11:54:23
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,10,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,10,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,9,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,9,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,7,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,7,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,7,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,7,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO StartLabel VALUES (14)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,16,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,15,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,11,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,12,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,11,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,12,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (16)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,111,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,84,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,84,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
17,0.1,83,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,18,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,19,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,18,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,19,true,11:54:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,29,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,34,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,30,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,30,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO StartLabel VALUES (0)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,143,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,147,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,148,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,143,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,13,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,12,true,11:54:25
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,11,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,11,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,13,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,13,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,13,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
18,0.1,14,true,11:54:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15126,true,11:54:56
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,14944,true,11:55:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15356,true,11:55:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15191,true,11:55:41
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,20,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,19,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,19,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,17,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,10,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,11,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,10,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,10,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,15,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,16,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,16,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,16,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,82,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,83,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,81,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
19,0.1,82,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,17,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,18,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,18,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,16,true,11:55:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,17,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,16,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,14,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,15,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO StartLabel VALUES (10)
INSERT INTO EndLabel VALUES (13)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,21,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,22,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,20,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,21,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,22,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,24,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,21,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
20,0.1,21,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,187,true,11:55:43
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,186,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,185,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,186,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 18);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO StartLabel VALUES (7)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,22,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,26,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,22,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,22,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (3)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,13,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,13,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,13,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,14,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,46,true,11:55:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,47,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,46,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,47,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO StartLabel VALUES (15)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,12,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,12,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,12,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
21,0.1,12,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,16,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,17,true,11:55:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (17)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,369,true,11:55:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,369,true,11:55:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,363,true,11:55:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,367,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,66,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,89,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,65,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,66,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO StartLabel VALUES (1)
INSERT INTO EndLabel VALUES (5)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,13,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,13,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,13,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,13,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,11,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,10,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,11,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
22,0.1,10,true,11:55:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO StartLabel VALUES (12)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,76,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,77,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,77,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,76,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (15)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 17);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,22,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,20,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,21,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (22, 5);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,115,true,11:55:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,117,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,116,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,117,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO StartLabel VALUES (13)
INSERT INTO EndLabel VALUES (2)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,18,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,17,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,17,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
23,0.1,17,true,11:55:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO StartLabel VALUES (3)
INSERT INTO EndLabel VALUES (4)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,468,true,11:55:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,463,true,11:55:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,466,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,467,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO StartLabel VALUES (8)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO StartLabel VALUES (19)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,17,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO StartLabel VALUES (19)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,18,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO StartLabel VALUES (19)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,19,true,11:55:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 21);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO StartLabel VALUES (19)
INSERT INTO EndLabel VALUES (9)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,22,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,21,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,22,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,22,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (21, 14);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (14)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,16,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,16,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,16,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,17,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO StartLabel VALUES (2)
INSERT INTO EndLabel VALUES (8)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,301,true,11:55:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,302,true,11:55:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,304,true,11:55:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
24,0.1,302,true,11:55:53
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 19);
INSERT INTO B (s, t) VALUES (23, 11);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,91,true,11:55:54
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,92,true,11:55:54
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,92,true,11:55:54
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,90,true,11:55:54
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO A (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,1403,true,11:55:57
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,1429,true,11:55:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,1416,true,11:56:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,1426,true,11:56:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO A (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO B (s, t) VALUES (22, 14);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (1)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,169,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,168,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,170,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,170,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO StartLabel VALUES (6)
INSERT INTO EndLabel VALUES (20)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,31,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,31,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,35,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,33,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 2);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO StartLabel VALUES (11)
INSERT INTO EndLabel VALUES (12)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,48,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,39,true,11:56:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,37,true,11:56:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
25,0.1,43,true,11:56:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 21);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO B (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 20);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (10)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,5278,true,11:56:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,5290,true,11:56:18
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,5312,true,11:56:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,5321,true,11:56:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 23);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO B (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 6);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO StartLabel VALUES (5)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,25,true,11:56:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (22)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,22,true,11:56:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (22)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,24,true,11:56:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (22)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,23,true,11:56:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 14);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (18, 25);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO A (s, t) VALUES (23, 23);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO StartLabel VALUES (22)
INSERT INTO EndLabel VALUES (22)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,169,true,11:56:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,167,true,11:56:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,167,true,11:56:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,172,true,11:56:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 24);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (12, 24);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 7);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO B (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 1);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 23);
INSERT INTO StartLabel VALUES (21)
INSERT INTO EndLabel VALUES (7)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,134,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,136,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,136,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,137,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (3, 24);
INSERT INTO B (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (4, 24);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO B (s, t) VALUES (23, 19);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 23);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO StartLabel VALUES (17)
INSERT INTO EndLabel VALUES (11)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,59,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,58,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,57,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
26,0.1,58,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 21);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 23);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO A (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 24);
INSERT INTO B (s, t) VALUES (22, 25);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (24, 2);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO A (s, t) VALUES (25, 24);
INSERT INTO StartLabel VALUES (9)
INSERT INTO EndLabel VALUES (21)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,44,true,11:56:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,44,true,11:56:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,44,true,11:56:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,46,true,11:56:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (4, 26);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 24);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (23, 21);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (25, 26);
INSERT INTO StartLabel VALUES (23)
INSERT INTO EndLabel VALUES (0)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,1090,true,11:56:34
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,1103,true,11:56:35
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,1102,true,11:56:36
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,1093,true,11:56:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (8, 23);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 19);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 25);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 21);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 24);
INSERT INTO A (s, t) VALUES (17, 25);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 25);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 8);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (26, 22);
INSERT INTO StartLabel VALUES (18)
INSERT INTO EndLabel VALUES (19)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,35356,true,11:57:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,35442,true,11:58:24
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
27,0.1,35339,true,11:58:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
DROP TABLE IF EXISTS StartLabel;
DROP TABLE IF EXISTS EndLabel;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE StartLabel (node int);
CREATE TABLE EndLabel (node int);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (1, 23);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (11, 21);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 12);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 9);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 22);
INSERT INTO B (s, t) VALUES (26, 0);
INSERT INTO A (s, t) VALUES (26, 8);
INSERT INTO A (s, t) VALUES (26, 21);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO StartLabel VALUES (20)
INSERT INTO EndLabel VALUES (6)


explain analyze WITH RECURSIVE a_kleene_star AS (
		SELECT s, t, 0 AS depth, array[s,t] AS path,
				array[s||'.'|| t] AS edges FROM A
		UNION
		SELECT A.s::VARCHAR, A.t::VARCHAR, a_kleene_star.depth+1,
				a_kleene_star.path|| ARRAY[A.t],
				 CONCAT(a_kleene_star.edges, ARRAY[A.s || '.' || A.t])
		FROM A , a_kleene_star
		WHERE A.s=a_kleene_star.t AND
		NOT concat(A.s||'.',A.t) IN (SELECT UNNEST(a_kleene_star.edges))
	)
	SELECT A1.s, A2.t
	FROM a_kleene_star A1, a_kleene_star A2, B, StartLabel, EndLabel
	WHERE A1.t=B.s AND B.t=A2.s AND A1.s=StartLabel.node AND
		A2.t=EndLabel.node AND NOT (A1.edges && A2.edges) 
	LIMIT 1;
------
