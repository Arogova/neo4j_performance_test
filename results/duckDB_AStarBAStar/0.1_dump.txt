seed = 1736777756533045770
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,5,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,5,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,5,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,5,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.1,4,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (5, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (5, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (5, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (5, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,8,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,3,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (7, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,13,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,11,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,12,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,12,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.1,6,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (4, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,4,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (8, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (8, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (8, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,5,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (8, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,9,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,9,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,8,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,8,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,7,true,15:15:59
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (9, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (9, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (9, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (9, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,7,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,10,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,10,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,10,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (10, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,5,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (10, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,5,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (10, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,4,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (10, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.1,5,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (10, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,13,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,14,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,13,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,13,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,6,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,10,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.1,10,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,16,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,15,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,15,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,15,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,9,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,8,true,15:16:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,23,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,22,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,22,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,23,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,9,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,8,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,8,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,8,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,7,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,11,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,11,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,10,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,10,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,14,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,14,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,14,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,14,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 13);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (13, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,18,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,19,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,19,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,17,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO B (s, t) VALUES (13, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
14,0.1,6,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO B (s, t) VALUES (13, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,7,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (14, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,7,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (14, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,7,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (14, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,7,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (14, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,9,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,9,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,10,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,9,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (14, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,24,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,24,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,24,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,23,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,23,true,15:16:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,22,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,22,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,23,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,16,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
15,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,9,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,8,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,9,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,8,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,15,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (15, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,8,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,9,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,8,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
16,0.1,8,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,22,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,21,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,23,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,22,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,7,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,7,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,6,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,6,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,13,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,14,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (16, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,21,true,15:16:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,20,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,20,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,20,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (8, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,10,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,10,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,10,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
17,0.1,11,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,35,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,31,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,32,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,34,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,23,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,22,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,23,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,25,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,31,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,30,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,35,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,30,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,13,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,14,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,13,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,14,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (16, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,14,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,15,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,14,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
18,0.1,14,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,19,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,20,true,15:16:03
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,19,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,19,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,10,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,10,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,11,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,12,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,9,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,9,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,8,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,8,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,11,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,11,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,11,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,11,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,6,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,6,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,6,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
19,0.1,7,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 18);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (2, 15);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (18, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,14,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,14,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,14,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,14,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,29,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,27,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,27,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,28,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,46,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,46,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,51,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,46,true,15:16:04
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,18,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,18,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,18,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,19,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 3);
INSERT INTO A (s, t) VALUES (19, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,15,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,15,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,15,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
20,0.1,15,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO B (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 13);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (19, 11);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,38,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,35,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,37,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,39,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO A (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 0);
INSERT INTO B (s, t) VALUES (19, 2);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 2);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,14,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,15,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,13,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,14,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 17);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 14);
INSERT INTO B (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,16,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,16,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,16,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,17,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 13);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,26,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,25,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,26,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,26,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 16);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 10);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,40,true,15:16:05
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,40,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,41,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
21,0.1,41,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 18);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO A (s, t) VALUES (19, 10);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 5);
INSERT INTO B (s, t) VALUES (20, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,70,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,70,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,71,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,70,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 10);
INSERT INTO A (s, t) VALUES (7, 17);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,46,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,46,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,48,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,48,true,15:16:06
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO A (s, t) VALUES (3, 14);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (17, 3);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,138,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,140,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,138,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,138,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (0, 17);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 9);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO B (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 9);
INSERT INTO A (s, t) VALUES (21, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,14,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,13,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,16,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,14,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 7);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 6);
INSERT INTO B (s, t) VALUES (21, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,30,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,28,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,28,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
22,0.1,29,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO B (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO A (s, t) VALUES (12, 17);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 17);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,13,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,13,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,14,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,13,true,15:16:07
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO B (s, t) VALUES (15, 8);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 7);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,30,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,31,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,31,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,31,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 10);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 10);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,78,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,79,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,81,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,76,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 18);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (17, 19);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 18);
INSERT INTO A (s, t) VALUES (19, 21);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 6);
INSERT INTO A (s, t) VALUES (21, 9);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,37,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,37,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,37,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,36,true,15:16:08
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (1, 21);
INSERT INTO A (s, t) VALUES (2, 19);
INSERT INTO A (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 21);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 6);
INSERT INTO B (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 3);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO A (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (22, 12);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,12,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,12,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,12,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
23,0.1,13,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 17);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 22);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 20);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 16);
INSERT INTO A (s, t) VALUES (8, 18);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 13);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 14);
INSERT INTO A (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,39,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,41,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,40,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,41,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 21);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 21);
INSERT INTO B (s, t) VALUES (3, 19);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 2);
INSERT INTO A (s, t) VALUES (23, 19);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,34,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,35,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,34,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,35,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 11);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (12, 8);
INSERT INTO B (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 12);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 12);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 11);
INSERT INTO A (s, t) VALUES (22, 2);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO B (s, t) VALUES (22, 10);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 2);
INSERT INTO B (s, t) VALUES (23, 15);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,24,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,23,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,23,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,23,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (4, 18);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO B (s, t) VALUES (7, 21);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO A (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (10, 21);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 17);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO A (s, t) VALUES (21, 3);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO B (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (23, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,46,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 5);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,45,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 5);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,45,true,15:16:09
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 5);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,45,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO B (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO A (s, t) VALUES (1, 16);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 16);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 17);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 13);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 11);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO B (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (15, 0);
INSERT INTO A (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO B (s, t) VALUES (19, 21);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 9);
INSERT INTO B (s, t) VALUES (22, 12);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 5);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,21,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,20,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,20,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
24,0.1,20,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (1, 20);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 22);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (3, 22);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 13);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 11);
INSERT INTO B (s, t) VALUES (6, 21);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 18);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 10);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (13, 11);
INSERT INTO B (s, t) VALUES (14, 9);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO A (s, t) VALUES (15, 5);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (15, 22);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 16);
INSERT INTO A (s, t) VALUES (17, 18);
INSERT INTO A (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO A (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (21, 4);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 23);
INSERT INTO A (s, t) VALUES (23, 11);
INSERT INTO A (s, t) VALUES (23, 17);
INSERT INTO A (s, t) VALUES (23, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,54,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,55,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,53,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,60,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 16);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 18);
INSERT INTO A (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (15, 20);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 16);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO B (s, t) VALUES (19, 9);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 3);
INSERT INTO A (s, t) VALUES (21, 20);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO B (s, t) VALUES (24, 8);
INSERT INTO B (s, t) VALUES (24, 17);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,50,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,53,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,51,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,52,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 14);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 13);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 11);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO A (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 19);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (16, 7);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO B (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO B (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 2);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (22, 24);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 21);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,24,true,15:16:10
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,24,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,26,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,24,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 24);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 21);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 8);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (13, 0);
INSERT INTO A (s, t) VALUES (13, 7);
INSERT INTO B (s, t) VALUES (13, 23);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (17, 24);
INSERT INTO B (s, t) VALUES (18, 3);
INSERT INTO B (s, t) VALUES (18, 16);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO B (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (20, 11);
INSERT INTO B (s, t) VALUES (22, 17);
INSERT INTO B (s, t) VALUES (22, 18);
INSERT INTO A (s, t) VALUES (23, 0);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,46,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,47,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,47,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,46,true,15:16:11
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (0, 14);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 17);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 22);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 16);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO B (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO A (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 20);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 21);
INSERT INTO A (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (18, 23);
INSERT INTO B (s, t) VALUES (19, 16);
INSERT INTO A (s, t) VALUES (20, 12);
INSERT INTO A (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 17);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 14);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 13);
INSERT INTO B (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 13);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO B (s, t) VALUES (24, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,360,true,15:16:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,364,true,15:16:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,365,true,15:16:12
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
25,0.1,364,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO B (s, t) VALUES (0, 16);
INSERT INTO A (s, t) VALUES (0, 20);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 14);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 12);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO A (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 22);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO A (s, t) VALUES (11, 18);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (13, 14);
INSERT INTO A (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 24);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO A (s, t) VALUES (21, 12);
INSERT INTO A (s, t) VALUES (21, 15);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 6);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,43,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,43,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,44,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,43,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 19);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (3, 20);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 23);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 25);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (13, 1);
INSERT INTO A (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (17, 4);
INSERT INTO B (s, t) VALUES (17, 6);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO A (s, t) VALUES (17, 13);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO A (s, t) VALUES (17, 20);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO A (s, t) VALUES (19, 23);
INSERT INTO A (s, t) VALUES (20, 19);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO A (s, t) VALUES (20, 22);
INSERT INTO B (s, t) VALUES (21, 7);
INSERT INTO A (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 20);
INSERT INTO A (s, t) VALUES (22, 19);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO A (s, t) VALUES (22, 22);
INSERT INTO A (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (24, 0);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO A (s, t) VALUES (24, 13);
INSERT INTO B (s, t) VALUES (24, 17);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,15,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,15,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,16,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,16,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 16);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 18);
INSERT INTO B (s, t) VALUES (3, 17);
INSERT INTO A (s, t) VALUES (3, 19);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 13);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 13);
INSERT INTO A (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO A (s, t) VALUES (8, 23);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 15);
INSERT INTO B (s, t) VALUES (9, 24);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO B (s, t) VALUES (11, 15);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO B (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO A (s, t) VALUES (13, 16);
INSERT INTO B (s, t) VALUES (13, 18);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 14);
INSERT INTO B (s, t) VALUES (14, 18);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 7);
INSERT INTO B (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO A (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 17);
INSERT INTO B (s, t) VALUES (23, 18);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 20);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 18);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,52,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,50,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,52,true,15:16:13
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,50,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 21);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 14);
INSERT INTO B (s, t) VALUES (3, 12);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 20);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (6, 23);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO A (s, t) VALUES (7, 16);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO B (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 19);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO B (s, t) VALUES (10, 16);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 7);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 13);
INSERT INTO A (s, t) VALUES (13, 2);
INSERT INTO B (s, t) VALUES (13, 7);
INSERT INTO A (s, t) VALUES (13, 8);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 22);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 17);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO A (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 16);
INSERT INTO B (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (19, 4);
INSERT INTO B (s, t) VALUES (19, 5);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 24);
INSERT INTO B (s, t) VALUES (24, 10);
INSERT INTO A (s, t) VALUES (24, 21);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO B (s, t) VALUES (25, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,69,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 25);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,66,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 25);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,66,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 25);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,65,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 25);
INSERT INTO A (s, t) VALUES (1, 19);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (2, 17);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO B (s, t) VALUES (3, 15);
INSERT INTO A (s, t) VALUES (3, 17);
INSERT INTO B (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (6, 21);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 22);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO B (s, t) VALUES (11, 3);
INSERT INTO A (s, t) VALUES (11, 11);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 14);
INSERT INTO A (s, t) VALUES (12, 23);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (14, 1);
INSERT INTO A (s, t) VALUES (14, 2);
INSERT INTO B (s, t) VALUES (14, 6);
INSERT INTO A (s, t) VALUES (14, 7);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 6);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO A (s, t) VALUES (15, 15);
INSERT INTO B (s, t) VALUES (15, 25);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (18, 0);
INSERT INTO A (s, t) VALUES (18, 4);
INSERT INTO A (s, t) VALUES (18, 5);
INSERT INTO A (s, t) VALUES (18, 20);
INSERT INTO A (s, t) VALUES (19, 13);
INSERT INTO A (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 23);
INSERT INTO B (s, t) VALUES (20, 6);
INSERT INTO B (s, t) VALUES (21, 13);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 22);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 16);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 16);
INSERT INTO B (s, t) VALUES (23, 24);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 23);
INSERT INTO A (s, t) VALUES (25, 0);
INSERT INTO A (s, t) VALUES (25, 4);
INSERT INTO B (s, t) VALUES (25, 5);
INSERT INTO B (s, t) VALUES (25, 23);
INSERT INTO B (s, t) VALUES (25, 25);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,38,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 22);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,38,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 22);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,37,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 22);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
26,0.1,36,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 12);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (1, 13);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 13);
INSERT INTO B (s, t) VALUES (3, 21);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 14);
INSERT INTO A (s, t) VALUES (7, 14);
INSERT INTO B (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (7, 25);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (9, 14);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 25);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (12, 20);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO A (s, t) VALUES (15, 4);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO A (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 14);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 17);
INSERT INTO B (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (19, 25);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO A (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 2);
INSERT INTO B (s, t) VALUES (24, 22);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,30,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,30,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,30,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,29,true,15:16:14
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 25);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 15);
INSERT INTO B (s, t) VALUES (1, 18);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (6, 19);
INSERT INTO B (s, t) VALUES (6, 24);
INSERT INTO A (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 19);
INSERT INTO B (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (11, 7);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO B (s, t) VALUES (12, 18);
INSERT INTO B (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO B (s, t) VALUES (13, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO A (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 8);
INSERT INTO A (s, t) VALUES (14, 9);
INSERT INTO B (s, t) VALUES (14, 13);
INSERT INTO A (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO B (s, t) VALUES (15, 23);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 26);
INSERT INTO A (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 8);
INSERT INTO A (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 20);
INSERT INTO A (s, t) VALUES (18, 9);
INSERT INTO B (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (18, 24);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO A (s, t) VALUES (20, 9);
INSERT INTO B (s, t) VALUES (20, 20);
INSERT INTO B (s, t) VALUES (20, 21);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (22, 5);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO B (s, t) VALUES (24, 5);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 0);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO A (s, t) VALUES (26, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,3863,true,15:16:22
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,3819,true,15:16:26
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,3975,true,15:16:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,3815,true,15:16:34
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 18);
INSERT INTO A (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (0, 22);
INSERT INTO A (s, t) VALUES (0, 23);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 26);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 26);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (3, 25);
INSERT INTO A (s, t) VALUES (3, 26);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (4, 15);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 17);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 16);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 14);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO A (s, t) VALUES (13, 9);
INSERT INTO B (s, t) VALUES (13, 17);
INSERT INTO B (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 2);
INSERT INTO A (s, t) VALUES (17, 9);
INSERT INTO B (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 12);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 11);
INSERT INTO B (s, t) VALUES (19, 12);
INSERT INTO B (s, t) VALUES (19, 20);
INSERT INTO B (s, t) VALUES (19, 22);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO B (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (21, 1);
INSERT INTO B (s, t) VALUES (21, 18);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO A (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 9);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (24, 4);
INSERT INTO B (s, t) VALUES (24, 12);
INSERT INTO A (s, t) VALUES (24, 25);
INSERT INTO A (s, t) VALUES (25, 17);
INSERT INTO A (s, t) VALUES (25, 18);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,2799,true,15:16:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,2869,true,15:16:42
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,2758,true,15:16:45
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,2793,true,15:16:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 25);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 16);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 16);
INSERT INTO A (s, t) VALUES (3, 22);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO A (s, t) VALUES (4, 17);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 15);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO A (s, t) VALUES (6, 25);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO A (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 0);
INSERT INTO B (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 18);
INSERT INTO B (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 15);
INSERT INTO B (s, t) VALUES (18, 2);
INSERT INTO B (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (19, 7);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO A (s, t) VALUES (20, 10);
INSERT INTO A (s, t) VALUES (21, 2);
INSERT INTO A (s, t) VALUES (21, 5);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (22, 8);
INSERT INTO A (s, t) VALUES (22, 11);
INSERT INTO A (s, t) VALUES (23, 4);
INSERT INTO A (s, t) VALUES (23, 25);
INSERT INTO A (s, t) VALUES (24, 1);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO A (s, t) VALUES (24, 26);
INSERT INTO B (s, t) VALUES (25, 3);
INSERT INTO A (s, t) VALUES (25, 5);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (26, 15);
INSERT INTO A (s, t) VALUES (26, 18);
INSERT INTO A (s, t) VALUES (26, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,133,true,15:16:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,131,true,15:16:48
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,131,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,132,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO A (s, t) VALUES (4, 25);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 20);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 13);
INSERT INTO B (s, t) VALUES (6, 20);
INSERT INTO B (s, t) VALUES (6, 22);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 20);
INSERT INTO B (s, t) VALUES (8, 24);
INSERT INTO A (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO A (s, t) VALUES (9, 20);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (11, 17);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO B (s, t) VALUES (12, 20);
INSERT INTO A (s, t) VALUES (13, 3);
INSERT INTO B (s, t) VALUES (13, 5);
INSERT INTO A (s, t) VALUES (13, 12);
INSERT INTO A (s, t) VALUES (13, 20);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 1);
INSERT INTO B (s, t) VALUES (15, 5);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (15, 20);
INSERT INTO A (s, t) VALUES (15, 21);
INSERT INTO B (s, t) VALUES (16, 0);
INSERT INTO A (s, t) VALUES (16, 10);
INSERT INTO A (s, t) VALUES (17, 2);
INSERT INTO B (s, t) VALUES (17, 8);
INSERT INTO B (s, t) VALUES (17, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO B (s, t) VALUES (17, 26);
INSERT INTO B (s, t) VALUES (18, 8);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO A (s, t) VALUES (18, 19);
INSERT INTO B (s, t) VALUES (18, 22);
INSERT INTO B (s, t) VALUES (19, 6);
INSERT INTO A (s, t) VALUES (19, 15);
INSERT INTO A (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 14);
INSERT INTO B (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 23);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO B (s, t) VALUES (22, 3);
INSERT INTO B (s, t) VALUES (23, 7);
INSERT INTO A (s, t) VALUES (23, 14);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (25, 9);
INSERT INTO A (s, t) VALUES (25, 10);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO A (s, t) VALUES (25, 19);
INSERT INTO A (s, t) VALUES (25, 22);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,54,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,52,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,53,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
27,0.1,53,true,15:16:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (2, 25);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (4, 19);
INSERT INTO A (s, t) VALUES (4, 21);
INSERT INTO B (s, t) VALUES (5, 12);
INSERT INTO A (s, t) VALUES (5, 17);
INSERT INTO A (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (5, 24);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 17);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (7, 20);
INSERT INTO A (s, t) VALUES (8, 4);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 18);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (9, 17);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 8);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO A (s, t) VALUES (10, 23);
INSERT INTO A (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);
INSERT INTO A (s, t) VALUES (12, 9);
INSERT INTO A (s, t) VALUES (14, 10);
INSERT INTO A (s, t) VALUES (14, 11);
INSERT INTO A (s, t) VALUES (14, 12);
INSERT INTO B (s, t) VALUES (15, 2);
INSERT INTO B (s, t) VALUES (15, 4);
INSERT INTO B (s, t) VALUES (15, 16);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (16, 9);
INSERT INTO A (s, t) VALUES (16, 11);
INSERT INTO B (s, t) VALUES (17, 12);
INSERT INTO B (s, t) VALUES (17, 13);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO B (s, t) VALUES (18, 18);
INSERT INTO B (s, t) VALUES (20, 0);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 8);
INSERT INTO A (s, t) VALUES (20, 11);
INSERT INTO A (s, t) VALUES (20, 17);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 12);
INSERT INTO B (s, t) VALUES (22, 22);
INSERT INTO B (s, t) VALUES (23, 5);
INSERT INTO B (s, t) VALUES (23, 6);
INSERT INTO A (s, t) VALUES (23, 20);
INSERT INTO A (s, t) VALUES (25, 20);
INSERT INTO A (s, t) VALUES (26, 1);
INSERT INTO B (s, t) VALUES (26, 20);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,2195,true,15:16:54
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 27);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,2320,true,15:16:56
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 27);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,2269,true,15:16:58
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 27);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,2264,true,15:17:00
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 15);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 18);
INSERT INTO A (s, t) VALUES (2, 24);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 14);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 15);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (7, 13);
INSERT INTO B (s, t) VALUES (7, 17);
INSERT INTO A (s, t) VALUES (7, 19);
INSERT INTO A (s, t) VALUES (7, 21);
INSERT INTO A (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 23);
INSERT INTO A (s, t) VALUES (10, 15);
INSERT INTO A (s, t) VALUES (10, 18);
INSERT INTO A (s, t) VALUES (10, 20);
INSERT INTO B (s, t) VALUES (10, 27);
INSERT INTO A (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 23);
INSERT INTO A (s, t) VALUES (11, 27);
INSERT INTO B (s, t) VALUES (12, 9);
INSERT INTO B (s, t) VALUES (12, 25);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 15);
INSERT INTO B (s, t) VALUES (13, 19);
INSERT INTO B (s, t) VALUES (14, 15);
INSERT INTO A (s, t) VALUES (14, 18);
INSERT INTO B (s, t) VALUES (14, 24);
INSERT INTO A (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 6);
INSERT INTO B (s, t) VALUES (16, 22);
INSERT INTO B (s, t) VALUES (16, 25);
INSERT INTO A (s, t) VALUES (17, 1);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO B (s, t) VALUES (17, 19);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 11);
INSERT INTO A (s, t) VALUES (18, 15);
INSERT INTO A (s, t) VALUES (18, 26);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 4);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (21, 4);
INSERT INTO B (s, t) VALUES (21, 8);
INSERT INTO B (s, t) VALUES (21, 10);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (22, 11);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO A (s, t) VALUES (23, 22);
INSERT INTO A (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (25, 9);
INSERT INTO B (s, t) VALUES (25, 18);
INSERT INTO A (s, t) VALUES (25, 26);
INSERT INTO A (s, t) VALUES (27, 10);
INSERT INTO A (s, t) VALUES (27, 23);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,78,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,81,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,71,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,73,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 22);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (2, 23);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 14);
INSERT INTO A (s, t) VALUES (3, 23);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 12);
INSERT INTO B (s, t) VALUES (4, 25);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 16);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO A (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO A (s, t) VALUES (5, 25);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (8, 22);
INSERT INTO A (s, t) VALUES (9, 16);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO A (s, t) VALUES (10, 19);
INSERT INTO A (s, t) VALUES (11, 16);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 25);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 22);
INSERT INTO A (s, t) VALUES (12, 24);
INSERT INTO A (s, t) VALUES (12, 27);
INSERT INTO B (s, t) VALUES (13, 13);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO B (s, t) VALUES (14, 7);
INSERT INTO A (s, t) VALUES (14, 13);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO A (s, t) VALUES (14, 19);
INSERT INTO A (s, t) VALUES (14, 25);
INSERT INTO B (s, t) VALUES (15, 0);
INSERT INTO B (s, t) VALUES (15, 3);
INSERT INTO A (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 12);
INSERT INTO A (s, t) VALUES (15, 26);
INSERT INTO A (s, t) VALUES (15, 27);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO B (s, t) VALUES (16, 14);
INSERT INTO A (s, t) VALUES (16, 27);
INSERT INTO A (s, t) VALUES (17, 5);
INSERT INTO A (s, t) VALUES (17, 17);
INSERT INTO A (s, t) VALUES (18, 21);
INSERT INTO A (s, t) VALUES (18, 22);
INSERT INTO A (s, t) VALUES (19, 0);
INSERT INTO A (s, t) VALUES (19, 14);
INSERT INTO B (s, t) VALUES (19, 19);
INSERT INTO A (s, t) VALUES (20, 4);
INSERT INTO B (s, t) VALUES (20, 7);
INSERT INTO A (s, t) VALUES (21, 0);
INSERT INTO A (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 8);
INSERT INTO B (s, t) VALUES (22, 9);
INSERT INTO A (s, t) VALUES (22, 15);
INSERT INTO B (s, t) VALUES (22, 21);
INSERT INTO B (s, t) VALUES (23, 1);
INSERT INTO A (s, t) VALUES (23, 10);
INSERT INTO B (s, t) VALUES (23, 26);
INSERT INTO A (s, t) VALUES (24, 3);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO A (s, t) VALUES (24, 16);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO B (s, t) VALUES (24, 21);
INSERT INTO B (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (26, 4);
INSERT INTO B (s, t) VALUES (27, 3);
INSERT INTO A (s, t) VALUES (27, 13);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,38,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,39,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,41,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,38,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO A (s, t) VALUES (2, 22);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (3, 15);
INSERT INTO B (s, t) VALUES (3, 18);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 14);
INSERT INTO B (s, t) VALUES (5, 18);
INSERT INTO B (s, t) VALUES (6, 26);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 15);
INSERT INTO A (s, t) VALUES (7, 24);
INSERT INTO B (s, t) VALUES (7, 26);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (8, 14);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 25);
INSERT INTO B (s, t) VALUES (8, 27);
INSERT INTO A (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (12, 1);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 5);
INSERT INTO B (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 12);
INSERT INTO A (s, t) VALUES (12, 16);
INSERT INTO A (s, t) VALUES (13, 24);
INSERT INTO B (s, t) VALUES (13, 26);
INSERT INTO A (s, t) VALUES (14, 4);
INSERT INTO A (s, t) VALUES (14, 8);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO A (s, t) VALUES (14, 27);
INSERT INTO B (s, t) VALUES (15, 9);
INSERT INTO A (s, t) VALUES (15, 10);
INSERT INTO B (s, t) VALUES (15, 11);
INSERT INTO B (s, t) VALUES (15, 13);
INSERT INTO A (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 1);
INSERT INTO A (s, t) VALUES (16, 2);
INSERT INTO B (s, t) VALUES (16, 4);
INSERT INTO B (s, t) VALUES (16, 8);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO B (s, t) VALUES (16, 23);
INSERT INTO A (s, t) VALUES (16, 24);
INSERT INTO A (s, t) VALUES (17, 0);
INSERT INTO B (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (19, 9);
INSERT INTO A (s, t) VALUES (19, 24);
INSERT INTO B (s, t) VALUES (20, 18);
INSERT INTO A (s, t) VALUES (20, 24);
INSERT INTO A (s, t) VALUES (20, 26);
INSERT INTO A (s, t) VALUES (21, 27);
INSERT INTO B (s, t) VALUES (22, 6);
INSERT INTO A (s, t) VALUES (22, 10);
INSERT INTO B (s, t) VALUES (23, 15);
INSERT INTO A (s, t) VALUES (23, 27);
INSERT INTO B (s, t) VALUES (24, 15);
INSERT INTO B (s, t) VALUES (24, 19);
INSERT INTO A (s, t) VALUES (24, 22);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO A (s, t) VALUES (25, 12);
INSERT INTO B (s, t) VALUES (25, 14);
INSERT INTO A (s, t) VALUES (25, 25);
INSERT INTO A (s, t) VALUES (26, 17);
INSERT INTO A (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 20);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (27, 12);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO B (s, t) VALUES (27, 16);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,110,true,15:17:01
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 27);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,115,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 27);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,117,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 27);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,111,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (0, 13);
INSERT INTO A (s, t) VALUES (0, 15);
INSERT INTO A (s, t) VALUES (0, 26);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 24);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 15);
INSERT INTO B (s, t) VALUES (2, 20);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (5, 16);
INSERT INTO A (s, t) VALUES (5, 19);
INSERT INTO B (s, t) VALUES (5, 21);
INSERT INTO B (s, t) VALUES (6, 18);
INSERT INTO A (s, t) VALUES (7, 18);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 13);
INSERT INTO B (s, t) VALUES (8, 15);
INSERT INTO B (s, t) VALUES (8, 17);
INSERT INTO B (s, t) VALUES (8, 26);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (9, 16);
INSERT INTO B (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 22);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (10, 21);
INSERT INTO A (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 25);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO A (s, t) VALUES (11, 15);
INSERT INTO B (s, t) VALUES (11, 16);
INSERT INTO B (s, t) VALUES (11, 20);
INSERT INTO A (s, t) VALUES (11, 22);
INSERT INTO B (s, t) VALUES (11, 26);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO A (s, t) VALUES (12, 14);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (13, 18);
INSERT INTO B (s, t) VALUES (13, 25);
INSERT INTO B (s, t) VALUES (14, 0);
INSERT INTO B (s, t) VALUES (14, 12);
INSERT INTO A (s, t) VALUES (14, 15);
INSERT INTO B (s, t) VALUES (14, 16);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO B (s, t) VALUES (15, 18);
INSERT INTO A (s, t) VALUES (15, 19);
INSERT INTO A (s, t) VALUES (16, 3);
INSERT INTO A (s, t) VALUES (16, 5);
INSERT INTO B (s, t) VALUES (16, 9);
INSERT INTO B (s, t) VALUES (16, 12);
INSERT INTO A (s, t) VALUES (16, 13);
INSERT INTO B (s, t) VALUES (16, 16);
INSERT INTO A (s, t) VALUES (16, 23);
INSERT INTO B (s, t) VALUES (16, 24);
INSERT INTO B (s, t) VALUES (17, 7);
INSERT INTO A (s, t) VALUES (17, 21);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO A (s, t) VALUES (17, 23);
INSERT INTO A (s, t) VALUES (18, 1);
INSERT INTO B (s, t) VALUES (18, 4);
INSERT INTO B (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (18, 14);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO A (s, t) VALUES (19, 2);
INSERT INTO A (s, t) VALUES (19, 8);
INSERT INTO B (s, t) VALUES (19, 14);
INSERT INTO A (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 5);
INSERT INTO A (s, t) VALUES (20, 13);
INSERT INTO B (s, t) VALUES (20, 15);
INSERT INTO B (s, t) VALUES (20, 19);
INSERT INTO A (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 19);
INSERT INTO A (s, t) VALUES (21, 26);
INSERT INTO A (s, t) VALUES (22, 20);
INSERT INTO B (s, t) VALUES (23, 3);
INSERT INTO A (s, t) VALUES (23, 8);
INSERT INTO B (s, t) VALUES (23, 20);
INSERT INTO B (s, t) VALUES (24, 6);
INSERT INTO A (s, t) VALUES (24, 11);
INSERT INTO B (s, t) VALUES (24, 14);
INSERT INTO A (s, t) VALUES (24, 18);
INSERT INTO B (s, t) VALUES (25, 2);
INSERT INTO B (s, t) VALUES (25, 8);
INSERT INTO B (s, t) VALUES (25, 15);
INSERT INTO B (s, t) VALUES (25, 17);
INSERT INTO B (s, t) VALUES (26, 18);
INSERT INTO B (s, t) VALUES (27, 4);
INSERT INTO B (s, t) VALUES (27, 9);
INSERT INTO B (s, t) VALUES (27, 15);
INSERT INTO A (s, t) VALUES (27, 19);
INSERT INTO B (s, t) VALUES (27, 27);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,30,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,29,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,28,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
28,0.1,28,true,15:17:02
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 19);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 19);
INSERT INTO A (s, t) VALUES (1, 22);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (2, 13);
INSERT INTO B (s, t) VALUES (2, 23);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 20);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (5, 22);
INSERT INTO B (s, t) VALUES (5, 23);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 23);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 12);
INSERT INTO B (s, t) VALUES (8, 21);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 13);
INSERT INTO A (s, t) VALUES (9, 19);
INSERT INTO B (s, t) VALUES (9, 26);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 14);
INSERT INTO B (s, t) VALUES (10, 24);
INSERT INTO A (s, t) VALUES (10, 27);
INSERT INTO B (s, t) VALUES (12, 5);
INSERT INTO A (s, t) VALUES (12, 15);
INSERT INTO B (s, t) VALUES (12, 17);
INSERT INTO A (s, t) VALUES (12, 19);
INSERT INTO A (s, t) VALUES (13, 4);
INSERT INTO A (s, t) VALUES (13, 22);
INSERT INTO A (s, t) VALUES (13, 23);
INSERT INTO B (s, t) VALUES (14, 5);
INSERT INTO B (s, t) VALUES (14, 20);
INSERT INTO B (s, t) VALUES (14, 21);
INSERT INTO A (s, t) VALUES (15, 6);
INSERT INTO B (s, t) VALUES (15, 14);
INSERT INTO A (s, t) VALUES (16, 15);
INSERT INTO B (s, t) VALUES (16, 17);
INSERT INTO A (s, t) VALUES (16, 19);
INSERT INTO A (s, t) VALUES (16, 20);
INSERT INTO B (s, t) VALUES (17, 10);
INSERT INTO B (s, t) VALUES (17, 14);
INSERT INTO A (s, t) VALUES (17, 22);
INSERT INTO B (s, t) VALUES (17, 27);
INSERT INTO A (s, t) VALUES (18, 2);
INSERT INTO A (s, t) VALUES (18, 6);
INSERT INTO A (s, t) VALUES (18, 10);
INSERT INTO A (s, t) VALUES (18, 13);
INSERT INTO B (s, t) VALUES (19, 1);
INSERT INTO B (s, t) VALUES (19, 7);
INSERT INTO A (s, t) VALUES (19, 26);
INSERT INTO B (s, t) VALUES (20, 1);
INSERT INTO B (s, t) VALUES (20, 3);
INSERT INTO B (s, t) VALUES (20, 13);
INSERT INTO A (s, t) VALUES (20, 16);
INSERT INTO B (s, t) VALUES (20, 23);
INSERT INTO B (s, t) VALUES (21, 15);
INSERT INTO A (s, t) VALUES (21, 16);
INSERT INTO B (s, t) VALUES (21, 17);
INSERT INTO A (s, t) VALUES (21, 21);
INSERT INTO B (s, t) VALUES (22, 0);
INSERT INTO A (s, t) VALUES (22, 1);
INSERT INTO A (s, t) VALUES (23, 26);
INSERT INTO B (s, t) VALUES (24, 7);
INSERT INTO B (s, t) VALUES (25, 13);
INSERT INTO B (s, t) VALUES (25, 20);
INSERT INTO B (s, t) VALUES (26, 3);
INSERT INTO B (s, t) VALUES (26, 7);
INSERT INTO B (s, t) VALUES (26, 12);
INSERT INTO B (s, t) VALUES (26, 19);
INSERT INTO A (s, t) VALUES (26, 23);
INSERT INTO B (s, t) VALUES (26, 24);
INSERT INTO A (s, t) VALUES (27, 7);
INSERT INTO A (s, t) VALUES (27, 12);
INSERT INTO A (s, t) VALUES (27, 14);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
