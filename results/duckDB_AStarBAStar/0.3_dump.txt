seed = 1736790326596970901
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,3,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,3,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
2,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (1, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (2, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (1, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,9,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,9,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,9,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,9,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
3,0.3,5,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:29
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,9,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,10,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,9,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,9,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,5,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,5,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,5,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
4,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,17,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,18,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,18,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,17,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,9,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,8,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,9,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,8,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (3, 0);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
5,0.3,4,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (4, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,7,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
6,0.3,6,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,14,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,13,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,13,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,14,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,20,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,20,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,19,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,20,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,15,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,15,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,17,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,15,true,18:45:30
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,6,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,6,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,6,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,6,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,25,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,25,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
7,0.3,25,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,24,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,24,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,25,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,26,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,17,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,18,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,22,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,23,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,22,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
8,0.3,21,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,8,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,9,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,9,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,8,true,18:45:31
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,11,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,11,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,12,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,11,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,15,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,17,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,15,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,16,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,21,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,19,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,20,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,20,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,61,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,62,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,63,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
9,0.3,61,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,18,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,18,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,18,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,18,true,18:45:32
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO B (s, t) VALUES (2, 9);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,896,true,18:45:34
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,898,true,18:45:35
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,900,true,18:45:36
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,894,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 7);
INSERT INTO A (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO A (s, t) VALUES (9, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,15,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,14,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,15,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,16,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,45,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,44,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,47,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,45,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 5);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 6);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,41,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,42,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,41,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
10,0.3,42,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 6);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 3);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO A (s, t) VALUES (9, 1);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,31,true,18:45:37
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,31,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,30,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,33,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 10);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,53,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,54,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,55,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,61,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO A (s, t) VALUES (4, 0);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 3);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (6, 4);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 7);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,23,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,23,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,23,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,23,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (1, 3);
INSERT INTO B (s, t) VALUES (1, 4);
INSERT INTO B (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 3);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 7);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO B (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 8);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,32,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,32,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,32,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,32,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO B (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (4, 1);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO A (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 4);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (9, 0);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,34,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,33,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,33,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
11,0.3,34,true,18:45:38
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO A (s, t) VALUES (0, 10);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 1);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 10);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 9);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO A (s, t) VALUES (10, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,97,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,96,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,95,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,96,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO B (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (1, 3);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 0);
INSERT INTO B (s, t) VALUES (2, 1);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 11);
INSERT INTO B (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO A (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 1);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO A (s, t) VALUES (4, 10);
INSERT INTO A (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 6);
INSERT INTO A (s, t) VALUES (5, 7);
INSERT INTO B (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (5, 11);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 5);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 8);
INSERT INTO B (s, t) VALUES (6, 10);
INSERT INTO B (s, t) VALUES (7, 7);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO A (s, t) VALUES (10, 2);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 5);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (11, 0);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,29,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,30,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,29,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,32,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 4);
INSERT INTO B (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 1);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO A (s, t) VALUES (1, 8);
INSERT INTO A (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (2, 3);
INSERT INTO A (s, t) VALUES (2, 6);
INSERT INTO A (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (3, 3);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO A (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO A (s, t) VALUES (5, 1);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 6);
INSERT INTO B (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO B (s, t) VALUES (10, 7);
INSERT INTO B (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO A (s, t) VALUES (11, 0);
INSERT INTO B (s, t) VALUES (11, 2);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO B (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,17,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,18,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,18,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,18,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 4);
INSERT INTO A (s, t) VALUES (0, 6);
INSERT INTO B (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (2, 2);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (4, 2);
INSERT INTO A (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (6, 3);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 8);
INSERT INTO A (s, t) VALUES (6, 9);
INSERT INTO B (s, t) VALUES (7, 0);
INSERT INTO A (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO A (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (8, 1);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 4);
INSERT INTO A (s, t) VALUES (9, 9);
INSERT INTO A (s, t) VALUES (10, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,32,true,18:45:39
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,30,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,35,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,32,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO B (s, t) VALUES (0, 3);
INSERT INTO B (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (0, 11);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 4);
INSERT INTO A (s, t) VALUES (1, 5);
INSERT INTO B (s, t) VALUES (1, 8);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (3, 2);
INSERT INTO B (s, t) VALUES (3, 9);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO A (s, t) VALUES (4, 2);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO A (s, t) VALUES (6, 5);
INSERT INTO A (s, t) VALUES (6, 6);
INSERT INTO B (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO B (s, t) VALUES (7, 9);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO A (s, t) VALUES (9, 6);
INSERT INTO B (s, t) VALUES (9, 7);
INSERT INTO B (s, t) VALUES (9, 11);
INSERT INTO B (s, t) VALUES (10, 0);
INSERT INTO A (s, t) VALUES (10, 1);
INSERT INTO A (s, t) VALUES (10, 4);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 9);
INSERT INTO B (s, t) VALUES (11, 1);
INSERT INTO A (s, t) VALUES (11, 2);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,116,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,117,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,115,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
12,0.3,114,true,18:45:40
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO A (s, t) VALUES (0, 7);
INSERT INTO A (s, t) VALUES (0, 8);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO B (s, t) VALUES (1, 11);
INSERT INTO B (s, t) VALUES (2, 0);
INSERT INTO A (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 10);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (4, 4);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO A (s, t) VALUES (4, 9);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 4);
INSERT INTO A (s, t) VALUES (6, 7);
INSERT INTO B (s, t) VALUES (6, 9);
INSERT INTO A (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 5);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO B (s, t) VALUES (7, 8);
INSERT INTO A (s, t) VALUES (7, 11);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO B (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 8);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO B (s, t) VALUES (10, 2);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO A (s, t) VALUES (11, 3);
INSERT INTO B (s, t) VALUES (11, 8);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,1740,true,18:45:44
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,1735,true,18:45:46
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,1752,true,18:45:47
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,1737,true,18:45:49
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO A (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 1);
INSERT INTO A (s, t) VALUES (0, 2);
INSERT INTO A (s, t) VALUES (0, 5);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO B (s, t) VALUES (1, 2);
INSERT INTO B (s, t) VALUES (1, 9);
INSERT INTO B (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 4);
INSERT INTO B (s, t) VALUES (2, 7);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 12);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO A (s, t) VALUES (3, 1);
INSERT INTO B (s, t) VALUES (3, 4);
INSERT INTO A (s, t) VALUES (3, 5);
INSERT INTO B (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (4, 3);
INSERT INTO B (s, t) VALUES (4, 5);
INSERT INTO B (s, t) VALUES (4, 6);
INSERT INTO B (s, t) VALUES (4, 11);
INSERT INTO A (s, t) VALUES (5, 2);
INSERT INTO A (s, t) VALUES (5, 4);
INSERT INTO A (s, t) VALUES (5, 5);
INSERT INTO B (s, t) VALUES (5, 8);
INSERT INTO A (s, t) VALUES (5, 10);
INSERT INTO A (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 2);
INSERT INTO B (s, t) VALUES (6, 7);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 1);
INSERT INTO B (s, t) VALUES (7, 3);
INSERT INTO A (s, t) VALUES (7, 4);
INSERT INTO B (s, t) VALUES (7, 6);
INSERT INTO A (s, t) VALUES (7, 7);
INSERT INTO A (s, t) VALUES (7, 8);
INSERT INTO B (s, t) VALUES (7, 10);
INSERT INTO B (s, t) VALUES (7, 12);
INSERT INTO B (s, t) VALUES (8, 2);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO B (s, t) VALUES (8, 5);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 8);
INSERT INTO A (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 1);
INSERT INTO B (s, t) VALUES (9, 2);
INSERT INTO B (s, t) VALUES (9, 3);
INSERT INTO B (s, t) VALUES (9, 4);
INSERT INTO B (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 9);
INSERT INTO B (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 6);
INSERT INTO A (s, t) VALUES (10, 10);
INSERT INTO B (s, t) VALUES (10, 11);
INSERT INTO B (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO A (s, t) VALUES (11, 6);
INSERT INTO A (s, t) VALUES (12, 0);
INSERT INTO B (s, t) VALUES (12, 2);
INSERT INTO A (s, t) VALUES (12, 3);
INSERT INTO B (s, t) VALUES (12, 4);
INSERT INTO A (s, t) VALUES (12, 6);
INSERT INTO B (s, t) VALUES (12, 8);
INSERT INTO A (s, t) VALUES (12, 10);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,529,true,18:45:50
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,534,true,18:45:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,525,true,18:45:51
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
13,0.3,523,true,18:45:52
DROP TABLE IF EXISTS A;
DROP TABLE IF EXISTS B;
CREATE OR REPLACE SEQUENCE serial START 1;
CREATE TABLE A (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
CREATE TABLE B (id INTEGER DEFAULT nextval('serial'), s int, t int, primary key(s,t));
INSERT INTO B (s, t) VALUES (0, 0);
INSERT INTO B (s, t) VALUES (0, 9);
INSERT INTO A (s, t) VALUES (1, 0);
INSERT INTO A (s, t) VALUES (1, 2);
INSERT INTO A (s, t) VALUES (1, 6);
INSERT INTO A (s, t) VALUES (1, 7);
INSERT INTO B (s, t) VALUES (1, 10);
INSERT INTO A (s, t) VALUES (1, 11);
INSERT INTO A (s, t) VALUES (1, 12);
INSERT INTO B (s, t) VALUES (2, 3);
INSERT INTO B (s, t) VALUES (2, 8);
INSERT INTO A (s, t) VALUES (2, 9);
INSERT INTO A (s, t) VALUES (3, 0);
INSERT INTO B (s, t) VALUES (3, 5);
INSERT INTO A (s, t) VALUES (3, 6);
INSERT INTO B (s, t) VALUES (3, 7);
INSERT INTO B (s, t) VALUES (3, 8);
INSERT INTO B (s, t) VALUES (3, 10);
INSERT INTO B (s, t) VALUES (3, 11);
INSERT INTO A (s, t) VALUES (4, 7);
INSERT INTO B (s, t) VALUES (4, 8);
INSERT INTO A (s, t) VALUES (4, 11);
INSERT INTO B (s, t) VALUES (5, 0);
INSERT INTO B (s, t) VALUES (5, 1);
INSERT INTO B (s, t) VALUES (5, 5);
INSERT INTO A (s, t) VALUES (5, 9);
INSERT INTO B (s, t) VALUES (6, 0);
INSERT INTO B (s, t) VALUES (6, 1);
INSERT INTO B (s, t) VALUES (6, 6);
INSERT INTO A (s, t) VALUES (6, 12);
INSERT INTO A (s, t) VALUES (7, 0);
INSERT INTO B (s, t) VALUES (7, 2);
INSERT INTO B (s, t) VALUES (7, 11);
INSERT INTO A (s, t) VALUES (8, 0);
INSERT INTO A (s, t) VALUES (8, 3);
INSERT INTO A (s, t) VALUES (8, 7);
INSERT INTO A (s, t) VALUES (8, 9);
INSERT INTO B (s, t) VALUES (8, 10);
INSERT INTO A (s, t) VALUES (8, 11);
INSERT INTO A (s, t) VALUES (9, 2);
INSERT INTO A (s, t) VALUES (9, 5);
INSERT INTO B (s, t) VALUES (9, 6);
INSERT INTO A (s, t) VALUES (9, 10);
INSERT INTO A (s, t) VALUES (9, 12);
INSERT INTO B (s, t) VALUES (10, 4);
INSERT INTO A (s, t) VALUES (10, 5);
INSERT INTO A (s, t) VALUES (10, 7);
INSERT INTO A (s, t) VALUES (10, 12);
INSERT INTO B (s, t) VALUES (11, 4);
INSERT INTO A (s, t) VALUES (11, 5);
INSERT INTO B (s, t) VALUES (11, 6);
INSERT INTO B (s, t) VALUES (11, 8);
INSERT INTO B (s, t) VALUES (11, 9);
INSERT INTO A (s, t) VALUES (11, 10);
INSERT INTO A (s, t) VALUES (11, 12);
INSERT INTO A (s, t) VALUES (12, 1);
INSERT INTO A (s, t) VALUES (12, 2);
INSERT INTO B (s, t) VALUES (12, 9);


explain analyze WITH RECURSIVE a_star AS (
    SELECT s, t, 0 AS depth, ARRAY[s, t] AS path, ARRAY[s || '.'|| t] AS edges FROM A
    UNION ALL
    SELECT A.s::VARCHAR, A.t::VARCHAR, a_star.depth + 1, a_star.path || ARRAY[A.t], CONCAT(a_star.edges, ARRAY[A.s || '.' || A.t])
    FROM A, a_star
    WHERE A.s = a_star.t
    AND NOT A.s || '.' || A.t IN (SELECT UNNEST(a_star.edges))
	)
	SELECT A1.s, A2.t 
	FROM a_star A1, a_star A2, B
	WHERE A1.t = B.s AND B.t = A2.s;
------
